log :: 'gab.lsp/logs':use
'gab.lsp/diagnostics':use

(\lsp.messages.into, 'gab.record') :def! do
  ok, method? :: self:at 'method'

  ok :else do
    log:error("No Method", self)
  end

  ok, params? :: self:at 'params'

  ok :else do
    log:error("No Params", self)
  end

  method :: method? :or "" :sigils.into
  params :: params? :or ""
  id     :: self :at 'id' :unwrap:or 1

  {
    method,
    \id: id,
    \params: params,
  }
end

(\def.lsp.handler!, 'gab.string') :def! do handler
  (\lsp.handle, { self:sigils.into, \id, \params }?, handler) :def!
end

# Dispatch a message into its handler, if we have one
\lsp.dispatch :def! do server
  message :: self

  \lsp.handle :at message :then do
      log("Dispatch", server)
      (.ok, message :lsp.handle server)
  end
end


#
# INITIALIZATION
#

TEXTDOCUMENTSYNCKIND.FULL :: 1

'initialize' :def.lsp.handler! do server
  (server, self:id) :respond! {
      "capabilities": {
        "textDocumentSync": {
          "openClose": .true,
          #"change": TEXTDOCUMENTSYNCKIND.FULL,
          "save": {
            "includeText": .true,
          },
        },
      },
      "serverInfo": {
        "name": "gablsp",
        "version": "0.0.1",
      },
    }

  server
end

'initialized' :def.lsp.handler! do server
  server
end

#
# SYNCHRONIZATION
#

'textDocument\/didOpen' :def.lsp.handler! do server
  uri :: self:params:at! 'textDocument' :at! 'uri'
  text:: self:params:at! 'textDocument' :at! 'text'

  log("Opened", uri)

  data :: server :server.data :put (uri, text)

  newserver :: server:server.data data

  newserver :diagnostics.queue_all

  newserver
end

'textDocument\/didSave' :def.lsp.handler! do server
  uri :: self:params:at! 'textDocument' :at! 'uri'
  ok, text? :: self:params:at 'text'

  log("Saved", uri)

  data? :: server :server.data :put (uri, text?)

  updated_server? :: server:server.data data?

  updated_server? :diagnostics.queue_all

  (ok, updated_server?) :unwrap:or (server)
end

'textDocument\/didClose' :def.lsp.handler! do server
  # TODO: Delete documents from the server data on load
  server
end

'textDocument\/didChange' :def.lsp.handler! do server
  # TODO: Handle incremental changes in documents
  server
end


#
# DIAGNOSTICS
#
