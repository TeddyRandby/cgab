'time':require

def bench = do (cb, runs)
  times = :list

  for _ in runs:to:each
    before = :clock

    cb()

    times:push(:clock - before)
  end

  sum = times:fold(0) do; @1 + @2 end

  sum / runs
end

def headToHead = do (a, b, runs)
  a_avg = bench(a, runs)
  b_avg = bench(b, runs)

  a_avg < b_avg then
    '{a} ran {b_avg / a_avg} times faster than {b}':print

    return a_avg
  end else
    '{b} ran {a_avg / b_avg} times faster than {a}':print

    return b_avg
  end
end


def timeit[.Block](opts)
  avg = ?opts match
    ?{ runs against } => headToHead(self, opts.against, opts.runs)  end
    ?{ runs }         => bench(self, opts.runs)                     end
    .Number           => bench(self, opts)                          end
    else              => .INVALID_ARGUMENTS:panic                   end

  '{self} ran in avg of {avg}s':print
end
