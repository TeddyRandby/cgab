def bench(cb, runs)
    let times = List:new

    for _ in runs:to
        def before = :clock

        cb()

        times:push(:clock - before)
    end

    let sum = times:fold(0, do (a, c) a + c end)

    sum / runs
end

def headToHead(a, b, runs)
    let a_avg = bench(a, runs)
    let b_avg = bench(b, runs)

    a_avg < b_avg then
        print(a, 'ran {b_avg / a_avg} times faster than', b)

        a_avg
    end else
        print(b, 'ran {a_avg / b_avg} times faster than', a)

        b_avg
    end
end


def timeit[Block](opts)
    def avg = opts:type match
        { runs against }:type => headToHead(self, opts.against, opts.runs)
        { runs }:type         => bench(self, opts.runs)
        Number                => bench(self, opts)
        else                  => panic('Invalid call to Block:timeit')

    print(self, 'ran in avg of {avg}s')
end
