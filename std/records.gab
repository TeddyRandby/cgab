:use .rec
:use .symbol

def _tuple.build[.gab.suspense](t, p, n, i)
  t:put!(i, p)

  { t, p, n, i }:print
  def ..args, next = self()
  { self, args, next }:print

  ( (i < n):and => next:_tuple.build(t, args, n, i + 1) ) :or => t
end

def _tuple.build[](t, p, n, i)
  t:put!(i, p)

  t
end

def tuple.collect[](msg, ..p, len)
  def t = :tuple.new(len)

  ..args, s = self:(msg)(..p)

  s:_tuple.build(t, args, len, 0)
end

def has?[.gab.record](key); self:at(key) == .some end

def _pairs[nil]; nil end

def _pairs[](rec)
  yield self, rec[self]

  rec:next(self):_pairs(rec)
end

def pairs[.gab.record]
  self:next:_pairs(self)
end

#def keys[.gab.record]
#    key = self:next
#
#    loop
#      yield key
#      key = self:next(key)
#    until key == nil end
#end
#
#def values[.gab.record]
#    key = self:next
#
#    loop
#      yield self[key]
#      key = self:next(key)
#    until key == nil end
#end
#
#def map![.gab.record](mapper)
#    key = self:next
#
#    loop
#      self:put!(key, mapper(key, self[key]))
#      key = self:next(key)
#    until key == nil end
#
#    self
#end
