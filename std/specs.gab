:use .maps
:use .records
:use .lists
:use .shapes
:use .symbol
:use .numbers
:use .msg
:use .any
:use .assert
:use .streams
:use .monads

def explain_specs(specs, separator)
  res = specs:tuple.collect(
        &:map,
        &:values,
        &:spec.explain,
        specs:len,
      ):join(
        &:values,
        separator,
        &+,
      )
end

def explain_strings(strings, separator)
  res = strings:tuple.collect(
          &:map,
          &:values,
          do (v); '{v} = {:spec(v):spec.explain}' end,
          strings:len,
        ):join(
          &:values,
          separator,
          &+,
        )
end

## Registry of qualified name -> spec
def registry.spec = :map.new

## Registry of spec -> qualified name
def registry.name = :map.new

## Registry of qualified name -> help text
def registry.help = :map.new

## Registry of receiver -> list of spec'd messages
def registry.messages = :map.new

def register(registry, name, value)
  # Add a new specification to the registry.
  # If this key already existed, panic.
  registry:add!(name, value):unwrap!
end

def spec.register[?{ spec }](name)
  register(registry.spec, name, self:spec)
  register(registry.name, self:spec, name)

  self:spec
end

def spec.register[?{ spec, help }](name)
  register(registry.spec, name, self:spec)
  register(registry.name, self:spec, name)
  register(registry.help, self:spec, self:help)

  self:spec
end

## Add a spec to the global registry under the given name.
def spec.def![](name, opts)
  opts:spec.register(name)
end

def spec[](name)
  registry.spec:at(name):unwrap!
end

def spec.help[]
  registry.help:at(self)
end

def spec.name[]
  registry.name:at(self):unwrap!
end

## PREDICATES
# A spec predicate is a function which:
#   - Takes a value as input
#   - returns (true, spec, value, path) if the value fits the spec,
#      where spec is the spec that accepted the value
#      where value is the accepted value
#      where path is the 'path' taken to the accepted value ( or nil, if no path )
#   - returns (false, spec, value, path) if the value does not fit the spec,
#      where spec is the predicate that rejected the value ( or nil, if no spec was found )
#      where value is the rejected value
#      where path is the 'path' taken to the rejected value ( or nil, if no path )

# NIL PREDICATE
def nil.predicate = :symbol.new 'predicate:nil'

def spec.fits?[?nil.predicate](value)
  return value == nil, self, value
end

def spec.gen[?nil.predicate]
  nil
end

def spec.explain[?nil.predicate](); 'Nil' end

def spec.nil[]; nil.predicate end

# UNKNOWN PREDICATE
def unknown.predicate = :symbol.new 'predicate:unknown'

def spec.fits?[?unknown.predicate](value)
  return true, self, value
end

def unknown_values = [ nil, 0, 1, 'test', true ]

def spec.gen[?unknown.predicate]
  idx = :int.between(0, unknown_values:len - 1)

  unknown_values[idx]
end

def spec.explain[?unknown.predicate](); 'Unknown' end

def spec.unknown[]; unknown.predicate end

registry.name:put!(unknown.predicate, 'unknown')

# INT PREDICATE
def int.predicate = :symbol.new 'predicate:int'

def spec.fits?[?int.predicate](value)
  return value:is_n?, self, value
end

def spec.gen[?int.predicate]
  :int.between(-10000, 10000)
end

def spec.explain[?int.predicate](); 'Int' end

def spec.int[]; int.predicate end

#
# FLOAT PREDICATE
#

def float.predicate = :symbol.new 'predicate:float'

def spec.fits?[?float.predicate](value)
  return value:is_n?, self, value
end

def spec.gen[?float.predicate]
  :float.between(-10000, 10000)
end

def spec.explain[?float.predicate](); 'Float' end

def spec.float[]; return float.predicate end

#
# STRING PREDICATE
#
def string.predicate = :symbol.new 'predicate:string'

def spec.fits?[?string.predicate](value)
  return value:is_s?, self, value
end

def spec.gen[?string.predicate]
  def len  = :int.between(1, 100)
  def list = :list.new

  len:times => list:push!(:int.between(0, 127))
  
  list:to_bytes
end

def spec.explain[?string.predicate](); 'String' end

def spec.string[]; string.predicate end

#
# SHAPE PREDICATE
#

def shape.predicate = :symbol.new 'predicate:shape'

def spec.fits?[?shape.predicate](value)
  return value:is_shape?, self, value
end

def spec.gen[?shape.predicate]
  yield
end

def spec.explain[?shape.predicate](); 'Shape' end

def spec.shape[]; shape.predicate end

#
# SUSPENSE PREDICATE
#

def suspense.predicate = :symbol.new 'predicate:suspense'

def spec.fits?[?suspense.predicate](value)
  return value:is_suspense?, self, value
end

def spec.gen[?suspense.predicate]
  yield
end

def spec.explain[?suspense.predicate](); 'Suspense' end

def spec.suspense[]; suspense.predicate end

#
# BOOL PREDICATE
#
def boolean.predicate = :symbol.new 'predicate:boolean'

def spec.fits?[?boolean.predicate](value)
  return value:is_b?, self, value
end

def spec.gen[?boolean.predicate]
  :float.between > 0.5
end

def spec.explain[?boolean.predicate](); 'Boolean' end

def spec.boolean[]; return boolean.predicate end

## predicate for a map of key type -> value type
def spec.map[](k_spec, v_spec)
  def map.predicate = :symbol.new 'predicate:map:{k_spec}:{v_spec}'

  def spec.fits?[?map.predicate](value)
    ?value == .Map :and do
      return false, self, value 
    end :or do
      value:for(&:pairs) do (k, v)
        (k_spec:spec.fits?(k) :or => return false, k_spec, k, k) :and =>
          v_spec:spec.fits?(v) :or => return false, v_spec, v, k
      end

      return true, self, value
    end
  end

  def spec.gen[?map.predicate]
    :map.new { [k_spec:spec.gen] =  v_spec:spec.gen }
  end

  def spec.explain[?map.predicate]
    'Map[{k_spec:spec.explain}: {v_spec:spec.explain}]'
  end

  map.predicate
end

def spec.fits_each?[](msg, apply)
  self:first(msg) do (..args)
    apply(..args):options.into
  end
end

## predicate for a list of values
def spec.list[](spec)
  def list.predicate = :symbol.new 'predicate:list:{spec}'

  def spec.fits?[?list.predicate](value)
    value:spec.fits_each?(&:values) do (v)
      spec:spec.fits?(v) # Not done
    end
  end

  def spec.gen[list.predicate]
    :list.new:push!(spec:spec.gen)
  end

  def spec.explain[?list.predicate]
    'list[{spec:spec.explain}]'
  end

  list.predicate
end

## predicate for a type which implements a set of messages
def spec.protocol[](protocol)
  def protocol.predicate = :symbol.new 'predicate:protocol:{protocol}'
# Return a predicate which returns true if the given value
# has all the keys of the record
  def spec.fits?[?protocol.predicate](value)
    protocol:spec.fits_each?(&:keys) do (k)
# If message doesn't specify for this value, then the spec doesn't fit
      m = :message.new(k)

# Check for a spec which corresponds to this message in the protocol
      m:has?(value) :and (false, self, k) do
       registry.spec:at(k) :unwrap:and (false, self, value, k) do (res, s)
          s:spec.fits?(value[k])
        end
      end

    end

    return true, self, value
  end

  def spec.gen[?protocol.predicate]
    def gen = :record.new(protocol)

    protocol:for(&:keys) do (k)
      found = registry.spec:at(k):unwrap!

      gen[k] = found:spec.gen
    end

    return gen
  end

# Modifying specs
  def spec.explain[?protocol.predicate]
    protocol:len == 0 :or "{}" =>
      "{\n " + explain_strings(protocol, '\n ') + "\n}"
  end

  protocol.predicate
end

def spec.values[](..specs)
  def values.predicate = :symbol.new 'predicate:values:{specs}'

  def spec.fits?[?values.predicate](..values)
     ..specs:fold(
              &:pairs,
              [ true, values.predicate, values, nil ],
              do (a, i, s)
                # Stop at the first failing spec
                # a[0] or a

                success, sp, value, path = s:spec.fits?(values[i])

                # If our spec fits, continue with the initial value.
                # Otherwise, return the result from the failed spec
                success :and([success, sp, value, path]) => a
              end,
         )
  end

  def spec.gen[?values.predicate]
    res = :values.new(specs:len)

    res:map! do (k)
      specs[k]:spec.gen
    end

    res
  end

  def spec.explain[?values.predicate]
    explain_specs(specs, ', ')
  end

  values.predicate
end

## Convenience specs for composing above types
def spec.result[](value, err)
  :spec.or(
    :spec.values(.ok, value),
    err,
  )
end

def spec.option[](value)
  :spec.or(
    :spec.values(.some, value),
    .none,
  )
end

def spec.or[](..specs)
  specs:len > 0 :or => .INVALID_ARGUMENTS:panic
  
  def or.predicate = :symbol.new 'predicate:or:{specs}'
  # Return a predicate which returns true if the given value
  # fits any of the given specs
  def spec.fits?[?or.predicate](value)
    valid = specs:fold(&:values, false) do (acc, s)
      acc :or => s:spec.fits?(value)
    end
    
    return valid, self, value
  end

  def spec.gen[?or.predicate]
    specs[(:int.between(0, specs:len - 1))] :spec.gen
  end

  def spec.explain[?or.predicate]
    explain_specs(specs, ' | ')
  end

  return or.predicate
end

def spec.and[](..specs)
  specs:len > 0 :or => .INVALID_ARGUMENTS:panic

  def and.predicate = :symbol.new 'predicate:and:{specs}'
  # Return a predicate which returns true iff the given value
  # fits all of the given specs
  def spec.fits?[?and.predicate](value)
    specs:for(&:pairs) do (k, spec)
      spec:spec.fits?(value) :or => return false, spec, value, k
    end
    
    return true, self, value
  end
  
  def spec.gen[?and.predicate]
    def start = specs[0]

    100:first(&:upto) do
        def value = start:spec.gen

        specs:fold(&:values, true) do (a, s)
          a :and => s:spec.fits?(value)
        end
      end:unwrap!
  end

  def spec.explain[?and.predicate]
    explain_specs(specs, ' & ')
  end

  return and.predicate
end

# Modifying specs
def spec.gt[](min)
  def gt.predicate = :symbol.new 'predicate:gt:{min}'

  def spec.fits?[?gt.predicate](value)
    return value > min, self, value
  end

  def spec.explain[?gt.predicate](); '> {min}' end

  gt.predicate
end

def spec.lt[](min)
  def lt.predicate = :symbol.new 'predicate:lt:{min}'

  def spec.fits?[?lt.predicate](value)
    return value < min, self, value
  end

  def spec.explain[?lt.predicate](); '< {min}' end

  lt.predicate
end

def spec.block.Args { input, output, semantics }

def spec.block.Application = spec.block.Args :with .in :with .out

def spec.block.input_fits?[spec.block.Application]
  self:input:spec.fits?(..(self:in))
end

def spec.block.output_fits?[spec.block.Application]
  self:output:spec.fits?(..(self:out))
end

def spec.semantic_fits?[nil](input, output)
  return true, nil, [input, output]
end

def spec.semantics_fits?[.gab.block](input, output)
  return self(input, output), self, [input, output], .semantics
end

def spec.block.semantics_fits?[spec.block.Application](input, output)
  self[.semantics]:spec.semantic_fits?(input, output)
end

def spec.block[](args, semantics)
  args:assert.is?(spec.block.Args)

  def block.predicate = :symbol.new 'predicate:block:{args}:{semantics}'

  def spec.fits?[?block.predicate](input, output)
    v = args:with(.input_value, input):with(.output_value, output)

    v:first(
      &:apply,
      [
        &:spec.block.input_fits?,
        &:spec.block.output_fits?,
        &:spec.semantic_fits?,
      ],
      &:option.into,
    )
  end

  def spec.gen[?block.predicate]
    def block.gen(..input)
      100:first(&:upto) do
        # Generate an output
        ..output = args:output:spec.gen

        v = args:with(.input_value, input):with(.output_value, output)

        v:first(
          &:apply,
          [
            &:spec.block.input_fits?,
            &:spec.block.output_fits?,
            &:spec.semantic_fits?,
          ],
          &:option.into,
        )
      end:unwrap!
    end
  end

  def spec.check[?block.predicate](block)
    100:first(&:upto) do
      def ..input  = args:input:spec.gen

      args:input:spec.fits?(..input) :and do
        ..output = block(..input)
        
        yield .some, block.predicate(input, output)
      end
    end
  end
  
  return block.predicate
end

def spec.generator[](..specs)
  :spec.values(..(specs:push(:spec.suspense)))
end

def general_message.predicate = :symbol.new 'predicate:message'

def spec.fits?[?general_message.predicate](value)
  return value:is_m?, self, value
end

def spec.gen[?general_message.predicate]; &+ end

def spec.explain[?general_message.predicate]; 'Message' end

## TODO: Handle -
##    - no arguments
##    - no output
##    - no receiver
def spec.message.Args { receiver, message, input, output }

def spec.message.Application = spec.message.Args :with .in :with .out :with .rec

def spec.message.input_fits?[spec.message.Application]
  self:input:spec.fits?(..(self:in))
end

def spec.message.output_fits?[spec.message.Application]
  self:output:spec.fits?(..(self:out))
end

def spec.message.receiver_fits?[spec.message.Application]
  self:receiver:spec.fits?(..(self:rec))
end

def spec.message.semantics_fits?[spec.message.Application](input, output)
  self[.semantics]:spec.semantic_fits?(input, output)
end

def spec.message.define[nil]
  general_message.predicate
end

def spec.message.define[spec.message.Args](args, semantics)
  def message.predicate = :symbol.new 'predicate:message:{args}:{semantics}'

  registry.messages:at_or!(
                      args:receiver,
                      :map.new,
                  ):add!(
                      args:message,
                      message.predicate,
                  )

  def spec.fits?[?message.predicate](rec, input, output)
    v = args:with(.input_value, input):with(.output_value, output)

    v:first(
      &:apply,
      [
        &:spec.message.input_fits?,
        &:spec.message.output_fits?,
        &:spec.message.receiver_fits?,
        &:spec.message.semantics_fits?,
      ],
      &:option.into,
    )
  end

  def spec.gen[?message.predicate](receiver)
    def (args:message)[receiver](..input)
      args:input:spec.fits?(..input) :and(false) do 
        100:first(&:upto) do
    # Generate an output
          def ..output = args:output:spec.gen

          args:output:spec.fits?(..output) :and do
            # If there are no semantics to satisfy, just return this output
            (semantics :or => ..output) :and do
              def rec = args:receiver:spec.gen

              args:receiver:spec.fits?(rec) :and do 
                # Otherwise, we need to continue generating until we
                # find a receiver and output which satisfy the semantics.
                semantics(rec, input, output) :and do
                  # Woohoo! modify self to reflect the generated receiver
                  self:spec.modify!(rec)

                  # Return the generated output
                  return ..output
                end
              end
            end
          end
        end
      end
    end

    return args:message
  end

  def spec.check[?message.predicate]
    100:first(&:upto) do
      def receiver = args:receiver:spec.gen

      args:receiver:spec.fits?(receiver) :and do
        def ..input  = args:input:spec.gen

        args:input:spec.fits?(..input) :and do
          ..output = receiver:(args:message)(..input)
          
          yield self:spec.fits?(receiver, input, output)
        end
      end
    end
  end

  def spec.explain[?message.predicate]
    '{args:message}[{args:receiver:spec.name}]({args:input:spec.explain}) -> {args:output:spec.explain}'
  end

  message.predicate
end

def spec.message[](args, semantics)
  args:spec.message.define(args, semantics)
end

def LabeledSpec { spec.label, spec.spec }

def spec.label[](spec.spec, spec.label); { spec.label, spec.spec } end

def spec.explain[LabeledSpec]; '{self:spec.label}: {self:spec.spec:spec.explain}' end

LabeledSpec:deferto(
  &:spec.gen,
  &:spec.fits?,
  &:spec.check,
  &:spec.modify!,
  &:spec.spec,
)

# A default gen implementation is the identity function
def spec.gen[]; self end

# A default explain implementation
def spec.explain[]; '{self}' end

def spec.doc[];
  name, help = registry.name[self], registry.help[self]

  '## {name}\n{help}\n\n\t{self:spec.explain}\n'
end

def spec.messages[]
  registry.messages:at(self):unwrap:and =>
    @1:for(&:map, &:values, &:spec.doc, &:print)
end

## FITS
# Default spec.fits? specializfation is just good ol' equality
def spec.fits?[](value)
  return self == value, self, value
end

# Since a spec is just a predicate, we can simply call it and return the result
def spec.fits?[.Block](value); self(value)      end

## MODIFY
# Because it is common for messages to modify `self`, spec
# needs a way to emulate this in messages that it generates.
# User types can define their own version of &:spec.modify! If this
# Doesn't satisfy their use case.
def spec.modify![.Record](new_value)
    self:for(&:keys) do (k)
      # If new_value has a corresponding value, modify self. Else, pass
      v = new_value:at(k):unwrap:and => self[k] = @1
  end
end

return nil
