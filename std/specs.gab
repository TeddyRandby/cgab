spec.t = .spec

explain_specs = do specs, separator:
  specs:transduce(
    '',
    \+,
    .td:compose(
      .td:map do _, s:
        s:spec.explain
      end,
      .td:interpose separator,
    ),
  )
end

explain_keys = do strings, separator:
  strings:transduce(
    '',
    \+,
    .td:compose(
      .td:map do name:
        '{name}'
      end,
      .td:interpose separator,
    ),
  )
end

\def! :def! ([spec.t], do opts:
  target = [opts:name]
  \spec.help :def! (target, do: (.ok, opts:help) end)
  \spec :def! (target, do: (.ok, opts:spec) end)
  opts:spec
end)

## PREDICATES
# A spec predicate is a function which:
#   - Takes a value as input
#   - returns (true, spec, value, path) if the value fits the spec,
#      where spec is the spec that accepted the value
#      where value is the accepted value
#      where path is the 'path' taken to the accepted value ( or nil, if no path )
#   - returns (false, spec, value, path) if the value does not fit the spec,
#      where spec is the predicate that rejected the value ( or nil, if no spec was found )
#      where value is the rejected value
#      where path is the 'path' taken to the rejected value ( or nil, if no path )

# NIL PREDICATE
nil.predicate = .predicate.nil

\spec.fits? :def! ([nil.predicate], do value:
  (value == .nil, self, value)
end)

\spec.gen :def! ([nil.predicate], do:
  .nil
end)

\spec.explain :def! ([nil.predicate], 'nil')

# UNKNOWN PREDICATE
unknown.predicate = .predicate.unknown

\spec.fits? :def! ([unknown.predicate], do value:
  (.true, self, value)
end)

unknown_values = [ .nil, 0, 1, 'test', .true ]

\spec.gen :def! ([unknown.predicate], do:
  idx = .int.between(0, unknown_values:len - 1)

  unknown_values:at!(idx)
end)

\spec.explain :def! ([unknown.predicate], 'unknown')

# INT PREDICATE
int.predicate = .predicate.int

\spec.fits? :def! ([int.predicate], do value:
  (value:is_n?, self, value)
end)

\spec.gen :def! ([int.predicate], do:
  .int.between(-10000, 10000)
end)

\spec.explain :def! ([int.predicate], 'int')

#
# FLOAT PREDICATE
#

float.predicate = .predicate.float

\spec.fits? :def! ([float.predicate], do value:
  (value:is_n?, self, value)
end)

\spec.gen :def! ([float.predicate], do:
  .float.between(-10000, 10000)
end)

\spec.explain :def! ([float.predicate], 'float')

#
# STRING PREDICATE
#
string.predicate = .predicate.string

\spec.fits? :def! ([string.predicate], do value:
  (value:is_s?, self, value)
end)

\spec.gen :def! ([string.predicate], do:
  len  = .int:between(1, 100)
  list = .gab.list()

  len:times => list:push!(.int:between(0, 127))
  
  list:to_bytes
end)

\spec.explain :def! ([string.predicate], 'string')

#
# SHAPE PREDICATE
#

shape.predicate = .predicate.shape

\spec.fits? :def! ([shape.predicate], do value:
  (value:is_shape?, self, value)
end)

\spec.gen :def! ([shape.predicate], do:
  { a, b, c }?
end)

\spec.explain :def! ([shape.predicate], 'shape')

#
# BOOL PREDICATE
#
boolean.predicate = .predicate.boolean

\spec.fits? :def! ([boolean.predicate], do value:
  (value:is_b?, self, value)
end)

\spec.gen :def! ([boolean.predicate], do:
  .float:between > 0.5
end)

\spec.explain :def! ([boolean.predicate], 'boolean')

and.predicate = do specs[]:
  specs:len > 0 :or do:
    'INVALID_ARGUMENTS':panic
  end

  pred = 'predicate:and:{specs}' :sigil.into
  # Return a predicate which returns true iff the given value
  # fits all of the given specs
  \spec.fits? :def! ([pred], do value:
    specs:for(\pairs, do k, spec:
      spec:spec.fits?(value) :or => (.false, spec, value, k)
    end)
    
    (.true, self, value)
  end)
  
  \spec.gen :def! ([pred], do:
    start = specs :at! 0

    td = .td:compose(
      .td:map do:
        value = start:spec.gen

        fits = specs:reduce(.true, do a, _, s:
          a:then do: s :spec.fits? value end
        end)

        (fits, value)
      end,
      .td:filter \self,
      .td:map \first,
      .td:take 1,
    )

    .range 100 :transduce(0, \first, td):assert!('Failed to generate a value for {specs}')
  end)

  \spec.explain :def! ([pred], do:
    explain_specs(specs, ' & ')
  end)

  pred
end

or.predicate = do specs[]:
  specs:len > 0 :or do:
    'INVALID_ARGUMENTS':panic
  end
  
  pred = 'predicate:or:{specs}' :sigil.into
  # Return a predicate which returns true if the given value
  # fits any of the given specs
  \spec.fits? :def! ([pred], do value:
    valid = specs:reduce(.false, do acc, _, s:
      acc :else do: s:spec.fits? value end
    end)
    
    (valid, self, value)
  end)

  \spec.gen :def! ([pred], do:
    specs:at!(.int.between(0, specs:len - 1)) :spec.gen
  end)

  \spec.explain :def! ([pred], do:
    explain_specs(specs, ' | ')
  end)

  pred
end

values.predicate = do specs[]:
  pred = 'predicate:values:{specs}' :sigil.into

  \spec.fits? :def! ([pred], do values[]:
    specs:reduce(
              \pairs,
              [ .true, pred, values, .nil ],
              do a, i, s:
                # Stop at the first failing spec
                # a[0] or a

                success, sp, value, path = s:spec.fits?(values[i])

                # If our spec fits, continue with the initial value.
                # Otherwise, return the result from the failed spec
                success :and([success, sp, value, path], a)
              end,
        )**
  end)

  \spec.gen :def! ([pred], do:
    res = .gab.tuple specs:len

    res:map! do k:
      specs:at!(k):spec.gen
    end

    res
  end)

  \spec.explain :def!([pred], do:
    '(' + explain_specs(specs, ', ') + ')'
  end)

  pred
end

protocol.predicate = do protocol:
  protocol_shape = protocol ?
  pred = 'predicate:protocol:{protocol}' :sigil.into
# Return a predicate which returns true if the given value
# has all the keys of the record
  \spec.fits? :def! ([pred], do value:
    protocol :reduce ([.true, self, value], do acc, m:
# Check for a spec which corresponds to this message in the protocol
      acc:at!(0) :and acc :else do:
        m :has? value :then do:
          m:sigil.into:spec:ok?:then do s:
            s:spec.fits?(value :at! m)
          end
        end :or [.false, self, value, m]
      end
    end)
  end)

  gentd = .td :map do key:
    found = key:sigil.into:spec:unwrap!
    (key, found:spec.gen)
  end

  \spec.gen :def! ([pred], do:
    protocol:transduce(protocol, \put!, gentd)
  end)

  \spec.explain :def! ([pred], do:
    (protocol:len == 0) :and "{}" :or ("{ " + explain_keys(protocol, ', ') + " }")
  end)

  pred
end

list.predicate = do spec:
  pred = 'predicate:list:{spec}' :sigil.into

  \spec.fits? :def! ([pred], do value:
    value:spec.fits_each?(\values)
  end)

  \spec.gen :def! ([pred], do:
    .gab.list():push!(spec:spec.gen)
  end)

  \spec.explain :def! ([pred], do:
    'list[{spec:spec.explain}]'
  end)

  pred
end

map.predicate = do k_spec, v_spec:
  pred = 'predicate:map:{k_spec}:{v_spec}' :sigil.into

  \spec.fits?:def! ([pred], do value:
    (value ? == .map) :and do:
      (.false, self, value)
    end :or do:
      value :for(
        \pairs,
        do k, v:
          [ [k_spec, k], [v_spec, v] ] :spec.recursively
        end,
        )

      (.true, self, value)
    end
  end)

  \spec.gen :def! ([pred], do:
    .map { [k_spec:spec.gen] =  v_spec:spec.gen }
  end)

  \spec.explain :def! ([pred], do:
    'Map[{k_spec:spec.explain}: {v_spec:spec.explain}]'
  end)

  pred
end

\spec.recursively :defcase! {
  # In the boolean cases, recurse if the spec matched
  # and bail early if it didn't
  .true = do tail, curr, alt:
    tail:spec.recursively(alt**)
  end,
  .false = do tail, curr, alt:
    (self, curr**)
  end,
  # In the recursion cases, continue to check head 
  # until there is no tail
  .nil = do alt[]:
    alt**
  end,
  ['gab.record'] = do alt[]:
    spec, value = self:head**

    does_fit, result[] = spec :spec.fits? value

    does_fit :spec.recursively (self:tail, result, alt)
  end,
}

spec.block.Args = { input, output, semantics }?

spec.block.Application = { input, output, semantics, in, out }?

\spec.block.input_fits? :def! ([spec.block.Application], do:
  self:input:spec.fits?(self:in**)
end)

\spec.block.output_fits? :def! ([spec.block.Application], do:
  self:output:spec.fits?(self:out**)
end)

\spec.semantic_fits? :def! ([.nil], do input, output:
  (.true, .nil, [input, output])
end)

\spec.semantics_fits? :def! ([.gab.block], do input, output:
  (self(input, output), self, [input, output], .semantics)
end)

\spec.block.semantics_fits? :def! ([spec.block.Application], do input, output:
  self:at!(.semantics):spec.semantic_fits?(input, output)
end)

block.predicate = do args, semantics:
  args:assert.is?(spec.block.Args)

  pred = 'predicate:block:{args}:{semantics}' :sigil.into

  \spec.fits? :def! ([pred], do input, output:
    v = args:with(.input_value, input):with(.output_value, output)

    v:first(
      \apply,
      [
        \spec.block.input_fits?,
        \spec.block.output_fits?,
        \spec.semantic_fits?,
      ],
      \options.into,
    )
  end)

  \spec.gen :def! ([pred], do:
    block.gen = do input[]:
      .range 100 :transduce(0, do:
        # Generate an output
        output[] = args:output:spec.gen

        v = args:with(.input_value, input):with(.output_value, output)

        v:first(
          \apply,
          [
            \spec.block.input_fits?,
            \spec.block.output_fits?,
            \spec.semantic_fits?,
          ],
          \options.into,
        )
      end):unwrap!
    end
  end)

  \spec.check :def! ([pred], do block:
    .range 100:transduce(do:
      input[]  = args:input:spec.gen

      args:input:spec.fits?(input**) :and do:
        output[] = block(input**)
        
        (.some, pred(input, output))
      end
    end)
  end)
  
  pred
end

general_message.predicate = 'predicate:message' :sigil.into

\spec.fits? :def! ([general_message.predicate], do value:
  (value:is_m?, self, value)
end)

\spec.gen :def! ([general_message.predicate], \+)

\spec.explain :def! ([general_message.predicate], 'message')

\spec.message.input_fits? :def! (['gab.record'], do:
  self:input:spec.fits?(self:in**)
end)

\spec.message.output_fits? :def! (['gab.record'], do:
  self:output:spec.fits?(self:out**)
end)

\spec.message.receiver_fits? :def! (['gab.record'], do:
  self:receiver:spec.fits?(self:rec**)
end)

\spec.message.semantics_fits? :def! (['gab.record'], do input, output:
  self:at!('semantics'):spec.semantic_fits?(input, output)
end)

\spec.message.define :defcase! {
  .nil = general_message.predicate,
  'gab.record' = do:
    args = self
    pred = 'predicate:message:{args}' :sigil.into

    \spec.fits? :def! ([pred], do rec, input, output:
      v = args:with(.input_value, input):with(.output_value, output)

      v:first(
        \apply,
        [
          \spec.message.input_fits?,
          \spec.message.output_fits?,
          \spec.message.receiver_fits?,
          \spec.message.semantics_fits?,
        ],
        \options.into,
      )
    end)

    \spec.gen :def! ([pred], do receiver:
      args:message :def! ([receiver], do input[]:
        # TODO: Maybe have a better syntax to avoid situations like this?
        # FIXME: Putting a comment after self here breaks things?
        me = self

        args:input:spec.fits?(input**) :then do:
          td = .td:compose (
            .td:map do:
              output[] = args:output:spec.gen

              args:output:spec.fits?(output**) :then do:
                # If there are no semantics to satisfy, just return this output
                (args:has? 'semantics' :else do: output** end) :then do:
                  rec = args:receiver:spec.gen

                  args:receiver:spec.fits?(rec) :then do:
                    # Otherwise, we need to continue generating until we
                    # find a receiver and output which satisfy the semantics.
                    args:semantics(rec, input, output) :then do:
                      # Woohoo! modify self to reflect the generated receiver
                      me:spec.modify!(rec)

                      # Return the generated output
                      output**
                    end
                  end
                end
              end
            end,
            .td:map \options.into,
            .td:filter \ok?,
            .td:map \first,
            .td:take 1,
          )

          .range 100 :transduce(
            0,
            \first,
            td,
          )
        end
      end)

      args:message
    end)

    \spec.check :def! ([pred], do:
      .range 100 :reduce(.nil, do:
        receiver = args:receiver:spec.gen

        args:receiver:spec.fits?(receiver) :and do:
          input[]  = args:input:spec.gen

          args:input:spec.fits?(input**) :and do:
            output[] = args:message(receiver, input**)
            
            self:spec.fits?(receiver, input, output)
          end
        end
      end)
    end)

    \spec.explain :def! ([pred], do:
      '{args:receiver:spec.name:unwrap!}{args:message} {args:input:spec.explain} -> {args:output:spec.explain}'
    end)

    pred
  end,
}

message.predicate = do args:
  args:spec.message.define
end

LabeledSpec = { spec.label, spec.spec }

\spec.label :def! ([], do spec.label:
  { spec.label, spec.spec = self }
end)

\spec.explain :def! ([LabeledSpec ?], do:
  '{self:spec.label}: {self:spec.spec:spec.explain}'
end)

\spec.gen :def! ([LabeledSpec ?], do:
  self:spec.spec:spec.gen
end)

\spec.fits? :def! ([LabeledSpec ?], do:
  self:spec.spec:spec.fits?
end)

\spec.check :def! ([LabeledSpec ?], do:
  self:spec.spec:spec.check
end)

\spec.modify! :def! ([LabeledSpec ?], do:
  self:spec.spec:spec.modify!
end)

# A default gen implementation is the identity function
\spec.gen :def! ([], do: self end)

# A default explain implementation
\spec.explain :def! ([], do: '{self}' end)

## FITS
# Default spec.fits? specializfation is just good ol' equality
\spec.fits? :def! ([], do value:
  (self == value, self, value)
end)

# Since a spec is just a predicate, we can simply call it and return the result
\spec.fits? :def! (['gab.block'], do value: self(value) end)

## MODIFY
# Because it is common for messages to modify `self`, spec
# needs a way to emulate this in messages that it generates.
# User types can define their own version of \spec.modify! If this
# Doesn't satisfy their use case.
\spec.modify! :def! (['gab.record'], do new_value:
  tapper = .td :tap do acc, k:
    # If new_value has a corresponding value, modify self. Else, pass
    v = new_value:at(k):unwrap:then do other:
      acc:put!(k, other)
    end
  end

  self:transduce(self, \self, tapper)
end)

\spec.option.into :defcase! {
  .nil = do err:
    spec.t:any(.ok, err:or .err)    
  end,
}

\spec.option.into :def! ([], do err:
  value = self
  spec.t:any(
    spec.t:values(.ok, value),
    err:or .err,
  )
end)

[spec.t] :defmodule! {
  \nil      = nil.predicate,
  \unknown  = unknown.predicate,
  \int      = int.predicate,
  \float    = float.predicate,
  \string   = string.predicate,
  \shape    = shape.predicate,
  \boolean  = boolean.predicate,
  \block    = block.predicate,
  \message  = message.predicate,
  \list     = list.predicate,
  \map      = map.predicate,
  \values   = values.predicate,
  \protocol = protocol.predicate,
  \all      = and.predicate,
  \any      = or.predicate,
  \nilable  = do spec:
    spec.t:any(
      spec,
      nil.predicate,
    )
  end,
  \option   = do value:
    spec.t:any(
      spec.t:values(.ok, value),
      .none,
    )
  end, 
  \result   = do value, err:
    value:spec.option.into err
  end,
  \gt = do min:
    gt.predicate = 'predicate:gt:{min}' :sigil.into

    \spec.fits? :def! ([gt.predicate], do value:
      (value > min, self, value)
    end)

    \spec.explain :def!([gt.predicate], '> {min}')

    gt.predicate
  end,
  \lt = do max:
    lt.predicate = 'predicate:lt:{max}' :sigil.into

    \spec.fits? :def! ([lt.predicate], do value:
      (value < max, self, value)
    end)

    \spec.explain :def! ([lt.predicate], '< {max}')

    lt.predicate
  end,
}

spec.t
