'msg' :use

# Traditionally, monads are types which wrap another value.
# In gab, we can implement this using tuples. The first element
# of the tuple is the type of the monad:
#   .ok, .err, .none, and any user-created ones.
#
# Creating a tuple is as simple as:
#   (.ok, <valid_value>) -or- (.err, <error_message>)

# The successfull case, unwrap into all the arguments.
\unwrap! :def! ([.ok], do args[]
  args**
end)

# All other types should panic when unwrapped
\unwrap! :def! ([.none, .err], do args[]
  'Cannot unwrap {self}: ':panic
end)

\unwrap :def! ([.ok], do args[]
  (.true, args**)
end)

\unwrap :def! ([.nil, .err, .false], do
  .false
end)

\options.into :def! ([.nil, .err, .false, .none], do args
  .none
end)

\options.into :def! ([.true, .ok], do args[]
  (.ok, args**)
end)
