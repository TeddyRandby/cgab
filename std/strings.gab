:use .string
:use .numbers
:use .conditionals

def [][.String](opts)
    (?opts) :match {
        [?{ from, to }] = do; self:slice(opts:from, opts:to) end,
        [?{ from }   ]  = do; self:slice(opts:from)          end,
        [?{ to }     ]  = do; self:slice(nil, opts:to)       end,
        .Number         = do; self:slice(opts)               end
    }
end

def rchars[.String]
  i, done = self:len - 1, -1

  loop
    yield self:at(i), self:len - i - 1
    i = i - 1
  until i == done end
end

def chars[.String]
  i, done = 0, self:len

  loop
    yield self:at(i), i
    i = i + 1
  until i == done end
end

def split[.String](sep)
  s, slen, w, wlen = 0, sep:len, 0, 0

  loop
    self:slice(s, s + slen) == sep then
      wlen > 0 and yield self:slice(w, w + wlen)

      w = w + wlen + slen
      s = s + slen
      wlen = 0
    end else
      s = s + 1
      wlen = wlen + 1
    end
  until s + slen > self:len end 

  wlen > 0 and yield self:slice(w, w + wlen)
end
