:use .string
:use .numbers
:use .symbol

def string.new[](*args)
  return args:join('')
end

def string.begins?[](sep, offset)
 sym = :symbol.new('string.begins?|{sep}') 

 def ==[sym](target); sep:begins?(target, offset or 0) end

 return sym
end

def [][.String](opts)
    ?opts match
        ?{ from to } => self:slice(opts:from, opts:to) end
        ?{ from }    => self:slice(opts:from)          end
        ?{ to }      => self:slice(nil, opts:to)       end
        .Number      => self:slice(opts)               end
        else         => .INVALID_ARGUMENTS:panic       end
end

def chars[.String]
  i, len = 0, self:len

  loop
    yield self:at(i)
    i = i + 1
  until i == len end
end

def split[.String](sep)
  s, slen, w, wlen = 0, sep:len, 0, 0

  loop
    self[s:to(s + slen)] match
      sep  =>
          wlen > 0 and yield self[w:to(w + wlen)]

          w = w + wlen + slen
          s = s + slen
          wlen = 0
      end 
      else =>
          s = s + 1
          wlen = wlen + 1
      end
  until s + slen > self:len end 

  yield self:slice(w)
end
