:use .any
:use .records

def apply[.Block](*stream)
  *args, s = stream

  s:is? .Suspense and loop
      self(args:splat)            
      *args, s = s()
  until not s:is? .Suspense end
end

def for[](msg, *p, cb)
  *args, s = self:(msg)(p:splat)

  s:is? .Suspense and loop
      cb(args:splat)            
      *args, s = s()
  until not s:is? .Suspense end
end

def map[](msg, *p, cb)
  *args, s = self:(msg)(p:splat)

  s:is? .Suspense and loop
      yield cb(args:splat)
      *args, s = s()
  until not s:is? .Suspense end
end

def take[](msg, *p, n)
  i, store = 0, :list.new
  *args, s = self:(msg)(p:splat)

  s:is? .Suspense and loop
      store:push!(args:splat)
      *args, s = s()
      i = i + 1
  until i == n or not s:is? .Suspense end

  store:splat
end

def first[](msg, *p, cb)
  *args, s = self:(msg)(p:splat)

  s:is? .Suspense and loop
      res, *vals = cb(args:splat)
      res == .some and return res, vals:splat

      *args, s = s()
  until not s:is? .Suspense end

  .none
end

def fold[](msg, *p, init, cb)
  acc, *args, s = init, self:(msg)(p:splat)

  s:is? .Suspense and loop
      acc = cb(acc, args:splat)            
      *args, s = s()
  until not s:is? .Suspense end

  acc
end
