def Range { from to }

def to[Number](to) Range:new(self, to) end

impl Range
  def each
    let v = 0

    loop
      yield v
      v = v + 1
    until v >= self.to
  end

  def new(opts, to)
    ?opts match
      ?{  to  }   => { from = 0 to = opts.to }
      ?{ from }   => { from = opts.from to = 0 }
      Number      => {
        from = to and opts or 0
        to   = to or opts
      }
      Range       => opts
      else        => panic('Invalid call to Range:make')
  end

  def print
    'Range({self.from},{self.to})':print
  end
end
