'msg' :use
'enum' :use
'numbers' :use
lists.t = 'list' :use

# Immediately apply td over (self :m), and collect
# the results into a list.
#   ie: some_list :list.collect (\values, .td :map \++)
\lists.collect :def! ([], do m, td
  self :transduce (m, .gab.list :make, \push!, td)
end)

\lists.next? :def.enum.next! (lists.t, do n
  (self:len > n, n, n + 1) :options.into
end)

\lists.values.step :def.enum.step! \at

\lists.pairs.step :def.enum.step! do n
  (n, self:at n)
end

\values :def.enum! (lists.t, \numbers.into, \lists.next?, \lists.values.step)

\pairs :def.enum! (lists.t, \numbers.into, \lists.next?, \lists.pairs.step)

\empty? :def! ([lists.t], do
  self:len == 0
end)
