lists.t = 'list' :use
'msg' :use

# Immediately apply td over (self :m), and collect
# the results into a list.
#   ie: some_list :list.collect (\values, .td :map \++)
\lists.collect :def! ([], do m, td
  self :transduce (m, .gab.list :make, \push!, td)
end)

\list.next? :defcase! {
  gab.number = do list
    list:len > self
  end,
  .nil = .init,
}

\list.values.continue :defcase! {
  .init = do list
    (.step, list:at(0), 1)
  end,
  .true = do list, n
    (.step, list:at(n), n + 1)
  end,
  .false = .done,
}

\values :def!(['gab.list'], do n
  n :list.next? self :list.values.continue(self, n)
end)

\list.pairs.continue :defcase! {
  .init = do list
    (.step, 0, list:at(0), 1)
  end,
  .true = do list, n
    (.step, n, list:at(n), n + 1)
  end,
  .false = .done,
}

\pairs :def!(['gab.list'], do n
  n :list.next? self :list.pairs.continue(self, n)
end)

\empty? :def! (['gab.list'], do
  self:len == 0
end)
