:use .list
:use .streams

def [][.List](key)
  self:at(key)
end

def values[.List]
  self:empty? and return

  v = 0 
  loop
    yield self:at(v)
    v = v + 1
  until v >= self:len end
end

def pairs[.List]
  self:empty? and return

  v = 0 
  loop
    yield v, self:at(v)
    v = v + 1
  until v >= self:len end
end

def <<[.List](other)
  other:for(&:each) do; self:push!(@1) end
  
  self
end

def empty?[.List]; self:len == 0 end

def list.collect[](msg, ..p)
  def l = :list.new

  ..args, s = self:(msg)(p:splat)

  loop
    ?s == .Suspense or break

    l:push!(args:splat)    

    ..args, s = s()
  end

  return l
end
