:use .map

def [][.gab.map](key)
  self:at(key):unwrap
end

def [=][.gab.map](key, value)
  self:put!(key, value)
end

def has?[.gab.map](key)
  self:at(key) == .some
end

def at_or![.gab.map](key, default)
  self:at(key):unwrap:or =>
    self:put!(key, default)
end

def del![.gab.map](key)
  self:put!(key, nil)
end

def maps.values[.gab.map](k)
  yield self:at(k)

  next_key = self:next(k)

  next_key == nil :or =>
    self:maps.values(next_key)
end

def values[.gab.map]
  key = self:next

  key == nil :or =>
    self:maps.values(key)
end

def maps.keys[.gab.map](k)
  yield k

  next_key = self:next(k)

  next_key == nil :or =>
    self:maps.keys(next_key)
end

def keys[.gab.map]
  key = self:next

  key == nil :or =>
    self:maps.keys(key)
end

def pairs[.gab.map]
    key = self:next

    loop
      yield key, self[key]
      key = self:next(key)
    until key == nil end
end
