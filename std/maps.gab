:use 'map'

def [][.gab.map](key)
  _, val = self:at(key)

  val
end

def [=][.gab.map](key, value); self:put!(key, value); end

def has?[.gab.map](key); self:at(key) == .some; end

def at_or![.gab.map](key, default)
  (_, val = self:at(key)) == .some then
    return val
  end else
    self:put!(key, default)
    return default
  end
end

def del![.gab.map](key); self:put!(key, nil); end

def each[.gab.map]
  key = self:next

  loop
    yield key, self:at(key)
    key = self:next(key)
  until key == nil end
end

def keys[.gab.map]
  key = self:next

  loop
    yield key
    key = self:next(key)
  until key == nil end
end

def values[.gab.map]
  key = self:next

  loop
    yield self[key]
    key = self:next(key)
  until key == nil end
end

def pairs[.gab.map]
    key = self:next

    loop
      yield key, self[key]
      key = self:next(key)
    until key == nil end
end
