'msg' :use
'enum' :use
maps.t = 'map' :use

\has? :def! ([maps.t], do key
  self:at key  == .ok
end)

\at_or! :def! ([maps.t], do key, default
  self:at key :unwrap:or do
    self:put! (key, default)
  end
end)

\at_pair! :def! ([maps.t], do key,
  (key, self:at key)
end)

\del! :def!([maps.t], do key
  self:put!(key, .nil)
end)

\maps.next? :def.enum.next! (maps.t, \next?)

\maps.values.step :def.enum.step! \at!

\maps.pairs.step :def.enum.step! \at_pair!

\values :def.enum! (maps.t, {
  init = \self,
  next = \maps.next?,
  step = \maps.values.step,
})

\pairs :def.enum! (maps.t, {
  init = \self,
  next = \maps.next?,
  step = \maps.pairs.step,
})

maps.t
