:use 'streams'
:use 'records'
:use 'lists'

def TestState  { fails errs }

def testState[]
    :record.new(TestState):reset
end

def reset[TestState]
    self:fails = 0
    self:errs = :list.new

    self
end

def fail[TestState](got, expected)
    self:fails = self:fails + 1
    self:errs:push!([got, expected])
end

def passed?[TestState]
    self:fails == 0
end

def show_errs[TestState]
    self:errs:for(&:each) do (mismatch)
        '     - got {mismatch[0]}, expecting {mismatch[1]}':print
    end
end

def T = :testState

def expect[](other)
    (self == other) or T:fail(self, other)
end

def expect_not[](other)
    (self == other) and T:fail(self, other)
end

def describe[](name, cb)
  '\n{name}:':print
  cb()
end

def it[](name, cb)
  T:reset

  cb()

  '  {T:passed? and '✓' or '×'} it {name}':print
  T:passed? or T:show_errs
end
