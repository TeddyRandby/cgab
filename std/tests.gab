records = 'records' :use
lists = 'lists' :use

TestState = { fails, errs }

testing.t = TestState ?

\reset :def! ([testing.t], do
  self:fails = 0
  self:errs = .gab.list ()

  self
end)

T = .gab.record testing.t :reset 

\tests.push_result :defcase! {


# When the result is true, we do nothing.
# The test passed.
  .true = .nil,

# When the result is false, The test failed.
# Count it and add it to the list of fails.
  .false = do actual, expected
    T:fails = T:fails + 1
    T:errs:push! [actual, expected]
  end,

}

\passed? :def! ([testing.t], do
  self:fails == 0
end)

\show_errs :def! ([testing.t], do
  self:errs:tap(\values, .nil, \self, do mismatch
      '     - got {mismatch:at!(0)}, expecting {mismatch:at!(1)}':print
  end)
end)

\should :def! ([], do msg, comp, other
   msg (self, comp, other) :tests.push_result(self, other)
end)

\be :def! ([], do comp, other
  comp (self, other)
end)

\not.be :def! ([], do comp, other
  comp (self, other) !
end)

\tests.covers :def! (['gab.string'], do cb
  '\n{self}:':print
  cb()
end)

\tests.should :def! (['gab.string'], do cb
  T:reset

  cb()

  '  { T:passed? :and '✓' :or '×' } it { self }':print

  T:passed?:or do
    T:show_errs
  end

end)
