\tests.handle_result :defcase! {
# When the result is true, we do nothing.
# The test passed.
  .true = .nil,
# When the result is false, The test failed.
# Count it and add it to the list of fails.
  .false = do actual, expected:
    '  × got {actual}, expecting {expected}':print
  end,
}

\test.comp.apply :def!(['gab.message', 'gab.block'], do x,y:
  self(x,y)
end)

\should.be :def! ([], do comp, other:
   comp:test.comp.apply(self, other):tests.handle_result(self, other)
end)

\should.not.be :def! ([], do comp, other:
   comp:test.comp.apply(self, other):!:tests.handle_result(self, other)
end)

\tests.covers :def! (['gab.string'], do cb:
  '\n{self} covers:':print
  cb()
end)

\tests.should :def! (['gab.string'], do cb:
  cb()

  '  ✓ it should { self }':print
end)
