'cmessages':use
'cnumbers':use
'crecords':use
'cshapes':use
'cstrings':use

\self :def! ([], do; self end)
\first :def! ([], do x; x end)
\second :def! ([], do _, x; x end)

\is? :def! ([], do other; (self:?) == (other) end)

[] :defmodule! {
  \and = do alt[]
    alt**
  end,
  \then = do alt[], f
    f (alt**)
  end,
  \or = do 
    self
  end,
  \else = do 
    self
  end,
  \assert! = do
    self
  end,
}

[.nil, .false, .none, .err] :defmodule! {
  \and = do
    self
  end,
  \then = do
    self
  end,
  \or = do alt[]
    alt**
  end,
  \else = do alt[], f
    f (alt**)
  end,
  \assert! = do msg
    'Assert failed: {msg}':panic
  end,
  \options.into = .none,
  \results.into = .err,
}

[] :defmodule! {
  \options.into = do args[]
    (.ok, self, args**)
  end,
  \results.into = do args[]
    (.ok, self, args**)
  end,
}

\ :def! ([.gab.option], do cond, data[]
  (cond:options.into, data**)
end)

[.ok] :defmodule! {
  \unwrap! = do args[]
    args**
  end,
  \unwrap = do args[]
    (.true, args**)
  end,
}

[.none, .err] :defmodule! {
  \unwrap! = do
    'Cannot unwrap {self}':panic
  end,
  \unwrap = .false,
}

\doreduce :defcase! {
  ## The sequence yielded a value
  .ok = do seq, acc, r, xs
    # Apply the reducer
    acc, cmd = r:reduce.step(acc, xs**)
    # proceed to the next sep
    cmd:doreduce(seq, acc, r)
  end,
  ## The sequence is done
  .none = do seq, acc, r
    r:reduce.done(acc)
  end,
  ## The reducer has no special command, continue
  .nil = do seq, acc, r
    # Apply the producer, resolving new values for the next step
    ok, xs[] = seq:seq.next
    # Tailcall to the next step
    ok:doreduce(seq, acc, r, xs)
  end,
  ## The reducer is done
  .stop = do seq, acc, r
    r:reduce.done(acc)
  end,
}

\def.seq! :def! ([], do into
  [self] :defmodule! {
    \seqs.into = into,
    \reduce = do acc, r
      seq = self:seqs.into
      ok, xs[] = seq:seq.next
      ok:doreduce(seq, acc, r, xs)
    end,
    \transduce = do acc, r, td
      self:reduce(acc, td r)
    end,
    \lists.into = do
      self:reduce(.gab.list(), \push!)
    end,
    \tuples.into = do
      self:reduce({}, \push)
    end,
    \each = do f
      self:transduce(.nil, \self, .td:map f)
    end,
  }
end)

\seq.next :def! (['gab.block'], do; self() end)

# Implement the reducer protocol for blocks and messages
['gab.block', 'gab.message'] :defmodule! {
  \reduce.step = do acc, xs[]
    acc = self (acc, xs**)
  end,
  \reduce.done = do acc
    acc
  end,
}

# A helper for declaring:
#   - a transducer's constructor
#     ie: (.td :map \++) constructs a mapping transducer, with \++
#   - a generic implementation for streams
#     ie: some_list :map (\values, 0, \+, \++)
\def.transducer! :def!(['gab.message'], do td
  self :def! ([.td], td)
end)

\td.conditionally :defcase! {
  .true = do acc, xs, rf
    rf:reduce.step (acc, xs**)
  end,
  .false = do acc
    acc
  end,
}

\td.stop_conditionally :defcase! {
  .true = do acc, xs, rf
    rf:reduce.step(acc, xs**)
  end,
  .false = do acc
    (acc, .stop)
  end,
}

\map :def.transducer! do f
  do rf
    do acc, xs[]
      rf:reduce.step(acc, f (xs**))
    end
  end
end

\filter :def.transducer! do f
  do rf
    do acc, xs[]
      (f (xs**)) :td.conditionally (acc, xs, rf)
    end
  end
end

\tap :def.transducer! do f
  do rf
    do acc, xs[]
      f (xs**)
      rf:reduce.step(acc, xs**)
    end
  end
end

\interpose :def.transducer! do sep
  do rf
    {
      started = .false,
      reduce.step = do acc, xs[]
        acc = self:started:td.conditionally (acc, [sep], rf)
        self:started = .true
        rf:reduce.step(acc, xs**)
      end,
      reduce.done = do acc
        acc
      end,
    }
  end
end

\take :def.transducer! do n
  do rf
    {
      n,
      reduce.step = do acc, xs[]
        self:n = self:n - 1
        (self:n >= 0) :td.stop_conditionally (acc, xs, rf)
      end,
      reduce.done = do acc
        acc
      end,
    }
  end
end

\skip :def.transducer! do n
  do rf
    {
      n,
      reduce.step = do acc, xs[]
        self:n = self:n - 1
        (self:n < 0) :td.conditionally (acc, xs, rf)
      end,
      reduce.done = do acc
        acc
      end,
    }
  end
end

\do_partition :defcase! {
  .true = do acc, state, rf
    state:n, xs = 0, state:d:slice(state:n)
    state:d:clear!
    rf (acc, xs**)
  end,
  .false = do acc, state, rf, xs
      acc
  end,
}

\partition :def.transducer! do n
  do rf
   {
      n = 0,
      d = .gab.tuple(n),
      reduce.step = do acc, xs[]
        self:d:put!(self:n, xs**)
        self:n = self:n + 1
        (self:n == n) :do_partition (acc, self, rf)
      end,
      reduce.done = do acc
        (self:n > 0) :do_partition (acc, self, rf)
      end,
    }
  end
end

\compose :defcase! {
  .nil = do f
    f
  end,
  gab.block = do g
# The following snippet is a bug which
# Caused the GC to overflow the stack.
# This definitely requires investigation.
# Infinitely calls itself, allocating more and more.
#    do args[]
#      self(g(args**))
#    end
    f = self
    do args[]
      f(g(args**))
    end
  end,
}

\compose :def! ([.td], do fns[]
  fns:seqs.into:transduce(.nil, \compose, .td :map \first)
end)
