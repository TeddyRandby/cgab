'core' :use
numbers.t = 'cnumbers' :use

\ :def! ([.int.between], do min, max
  .float.between (min,max) :floor
end)

\is_n? :def! ([], .false)

\is_n? :def! ([numbers.t], .true)

\++ :def! ([numbers.t], do
  self + 1
end)

\-- :def! ([numbers.t], do
  self - 1
end)

\even? :def! ([numbers.t], do
  (self % 2) == 0
end)

\odd? :def! ([numbers.t], do
  (self % 2) == 1
end)

\pos? :def! ([numbers.t], do
  self > 0
end)

\neg? :def! ([numbers.t], do
  self < 0
end)

\numbers.into :def!([numbers.t], do
  self
end)

\numbers.into :def!([.nil, .false, .none, .seqs.init], 0)

\next? :def! ([numbers.t], do x
  (self > x, x + 1)
end)

\numbers.next? :def.iter.next! ([numbers.t], \next?)

\numbers.upto.step :def.iter.step! \first

\upto :def.iter! ([numbers.t], {
  init = \numbers.into,
  next = \numbers.next?,
  step = \numbers.upto.step
})
