s = 'specs':use

record.spec = s:def! {
  name = "gab.record",
  help = "An ordered, constant array of key-value pairs.",
  spec = s:protocol {},
}

s:def! {
  name = "tuple",
  help = "Construct an empty tuple with the given length.",
  spec = s:message {
    receiver  = .tuple,
    message   = \,
    input     = s:int :spec.label "N",
    output    = record.spec :spec.label "Empty record with keys 0-N",
    semantics = .nil,
  }
}

s:def! {
  name = "record",
  help = "Construct an empty record with the given shape.",
  spec = s:message {
    receiver = .record,
    message  = \,
    input    = s:shape :spec.label "Template",
    output   = record.spec,
    semantics = .nil,
  }
}


KEY   = s:unknown:spec.label "Key"
VALUE = s:unknown:spec.label "Value"

s:def! {
  name = "gab.record\len",
  help = "Return the number of key-value pairs in the record.",
  spec = s:message {
    receiver  = record.spec,
    message   = \len,
    input     = s:values,
    output    = s:int,
    semantics = .nil,
  },
}

s:def! {
  name = "gab.record\at",
  help = "Return the value at the given key, if it exists.",
  spec = s:message {
    receiver    = record.spec,
    message     = \at,
    input       = KEY,
    output      = s:option VALUE,
    semantics  = .nil,
  },
}

s:def! {
  name = "gab.record\put!",
  help = "Put a value in the record at the given key. Panics if the key isn't present.",
  spec = s:message {
    receiver   = record.spec,
    message    = \put!,
    input      = s:values(KEY, VALUE),
    output     = VALUE,
    semantics  = .nil,
  }
}

s:def! {
  name = "gab.record/next",
  help = "Return the key that appears after the given key in the record. When .next.init is passed, return the first key.",
  spec = s:message {
    receiver   = record.spec,
    message    = \next,
    input      = KEY,
    output     = s:option KEY,
    semantics  = .nil,
  }
}

s:def! {
  name = "gab.record\slice",
  help = "Return a record with only the key-value pairs in the given range.",
  spec = s:message {
    receiver   = record.spec,
    message    = \slice,
    input      = s:values(
      s:any(s:int, s:nil),
      s:any(s:int, s:nil),
    ),
    output     = record.spec,
    semantics  = .nil,
  }
}

s:def! {
  name = "gab.record\push",
  help = "Return a record with an additional value. ",
  spec = s:message {
    receiver  = record.spec,
    message   = \push,
    input     = VALUE,
    output    = record.spec,
    semantics = .nil,
  }
}

s:def! {
  name = "gab.record\has?",
  help = "Return true if the key exists in the record.",
  spec = s:message {
    receiver = record.spec,
    message  = \has?,
    input    = KEY,
    output   = s:boolean,
    semantics = .nil,
  }
}
