s = 'specs':use

record.spec = s:def! {
  name = .gab.record,
  help = "An ordered, constant array of key-value pairs.",
  spec = s:protocol {},
}

KEY   = s:unknown:spec.label "key"
VALUE = s:unknown:spec.label "value"
INDEX = s:int:spec.label "index"

s:def! {
  name = .gab.record.len,
  help = "Return the number of key-value pairs in the record.",
  spec = s:message {
    receiver  = record.spec,
    message   = \len,
    input     = s:values,
    output    = s:int,
    semantics = .nil,
  },
}

s:def! {
  name = .gab.record.at,
  help = "Return the value at the given key, if it exists.",
  spec = s:message {
    receiver   = record.spec,
    message    = \at,
    input      = KEY,
    output     = s:option VALUE,
    semantics  = .nil,
  },
}

s:def! {
  name = .gab.record.at!,
  help = "Return the value at each of the given keys. Panics if any are missing.",
  spec = s:message {
    receiver   = record.spec,
    message    = \at!,
    input      = s:values(KEY),
    output     = s:values(VALUE),
    semantics  = .nil,
  },
}

s:def! {
  name = .gab.record.put,
  help = "Return a new record with the additional key-value pair, or an updated value for an existing key.",
  spec = s:message {
    receiver   = record.spec,
    message    = \put,
    input      = s:values(KEY, VALUE),
    output     = record.spec,
    semantics  = .nil,
  }
}

s:def! {
  name = .gab.record.seqs.next,
  help = "Return the key that appears after the given key in the record.",
  spec = s:message {
    receiver   = record.spec,
    message    = \seqs.next,
    input      = KEY,
    output     = s:option KEY,
    semantics  = .nil,
  }
}

s:def! {
  name = .gab.record.seqs.init,
  help = "Return the first key in the record, if any.",
  spec = s:message {
    receiver   = record.spec,
    message    = \seqs.init,
    input      = s:values,
    output     = s:option KEY,
    semantics  = .nil,
  }
}

record.spec
