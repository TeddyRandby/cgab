tests.results.in = .gab.channel()

module = {
  tests.results.out,
  tests.covers,
  tests.should,
}

\tests.when :def! (module ?, do cb:
  t = self :tests.results.out .gab.channel()

  .gab.fiber do:
    tests.results.in <! t:tests.results.out

    cb(t)

    t:tests.results.out :close!
  end

  self
end)

tests.compare.results.t = { t, result, a, b, cmp }?

\tests.compare.dodisplay :defcase! {
  .true = do result:
    #'[PASS] {result:t:tests.covers} should {result:t:tests.should} {result:a} {result:cmp} {result:b}':print
    .nil
  end,
  .false = do result:
    '[FAIL] {result:t:tests.covers} should {result:t:tests.should} {result:a} {result:cmp} {result:b}':print
  end,
}

\tests.results.display :def! (tests.compare.results.t, do:
  self:result :tests.compare.dodisplay self
end)

\tests.compare :def!('gab.message', 'gab.block', do a, b, t:
  result = self(a,b)
  { t, result, a, b, cmp = self }
end)

\tests.expect :def! (module ?, do a, cmp, b:
  self:tests.results.out <! cmp:tests.compare(a, b, self)
end)

.gab.fiber do:
  tests.results.in :each do chan:
    chan :each \tests.results.display
  end
end

module
