'transducers':use
spec.t = .spec

explain_specs = (specs separator) => specs
  :transduce(
    ''
    \+
    .td:map \spec.name
    |> .td:interpose separator)

explain_values = (strings separator) => strings
  :transduce(
    ''
    \+
    .td:map ((v) => .string:make('\\' v))
    |> .td:interpose separator)

\defspec!:def!(
  'sigil'
  (opts) => do
    \spec.help:def!(
      opts:spec
      () => opts:at \help)

    \spec.name:def!(
      opts:spec
      self:strings.into)

    \spec:def!(
      self
      opts:spec)

    opts:spec
  end)

['sigil'] :defmodule! {
  \spec.doc!     () => (self:spec.help!, self:spec.explain!)
  \spec.help!    () => self:spec:spec.help:unwrap!
  \spec.gen!     () => self:spec:spec.gen
  \spec.explain! () => self:spec:spec.explain
  \spec.into     () => do
    spec = self
    \spec :has? spec :then(() => spec:spec) :or spec
  end
}

\spec.into :def! () => self

## PREDICATES
# A spec predicate is a function which
#   - Takes a value as input
#   - returns (true, spec, value, path) if the value fits the spec,
#      where spec is the spec that accepted the value
#      where value is the accepted value
#      where path is the 'path' taken to the accepted value ( or nil, if no path )
#   - returns (false, spec, value, path) if the value does not fit the spec,
#      where spec is the predicate that rejected the value ( or nil, if no spec was found )
#      where value is the rejected value
#      where path is the 'path' taken to the rejected value ( or nil, if no path )

# NIL PREDICATE
nil.predicate = .predicate.nil

\spec.fits?:def!(
  nil.predicate
  value => (value == .nil self value))

\spec.gen:def!(
  nil.predicate
  .nil)

\spec.explain:def!(nil.predicate 'nil')

# UNKNOWN PREDICATE
unknown.predicate = .predicate.unknown

unknown_values = [ .nil 0 1 'test' .true ]

[unknown.predicate] :defmodule! {
  \spec.fits? value => (.true self value)

  \spec.gen () => do
    idx = .number:int.between(0 unknown_values:len - 1)
    unknown_values:at! idx
  end

  \spec.explain 'unknown'
}

# INT PREDICATE
int.predicate = .predicate.int

\spec.fits?:def!(
  int.predicate
  value => (value:is_n?, self, value))

\spec.gen:def!(
  int.predicate
  () => .number:int.between(-10000 10000))

\spec.explain:def!(int.predicate 'int')

#
# FLOAT PREDICATE
#

float.predicate = .predicate.float

\spec.fits?:def!(
  float.predicate
  (value) => (value:is_n?, self, value))

\spec.gen:def!(
  float.predicate
  () => .float.between:(-10000, 10000))

\spec.explain:def!(float.predicate 'float')

#
# STRING PREDICATE
#
string.predicate = .predicate.string

\spec.fits?:def!(
  string.predicate
  (value) => (value:is_s?, self, value))

random.strings = ['vim-users' 'emacs-users']

\spec.gen:def!(
  string.predicate
  () => do
    idx  = .number:int.between(0 random.strings:len - 1)
    random.strings :at! idx
  end)

\spec.explain:def!(string.predicate 'string')

#
# SHAPE PREDICATE
#
shape.predicate = .predicate.shape

\spec.fits?:def!(
  shape.predicate
  (value) => (value:is_shape?, self, value))

\spec.gen:def!(
  shape.predicate
  () => { }?)

\spec.explain:def!(shape.predicate 'shape')

#
# BOOL PREDICATE
#
boolean.predicate = .predicate.boolean

\spec.fits?:def!(
  boolean.predicate
 (value) =>(value:is_b?, self, value))

\spec.gen:def!(
  boolean.predicate
  () => .float.between:() > 0.5)

\spec.explain:def!(boolean.predicate 'boolean')

#
# COMPOSING SPECS
#
and.predicate = (specs[]) => do
  (specs:len > 0):assert! 'Must have at least one spec for the and predicate'

  pred = .string:make('predicate:and:' specs):sigils.into

  [pred] :defmodule! {
    \spec.explain () => explain_specs:(specs ' & ')

    \spec.fits? value => specs:reduce(
          []
          (acc  spec  key) => [spec:spec.fits?(value) :or (.false spec value key)])**
    
    \spec.gen () => do
        start = specs :at! 0

        xf = .td:map(() => do
              value = start:spec.gen

              fits = specs:reduce(
                .true
                (a _ s) => a:then () => s :spec.fits? value)

              (fits value)
            end)
            |> .td:filter \self
            |> .td:map \first
            |> .td:take 1

        .range
          :make 100
          :transduce(0 \first xf)
          :assert!('Failed to generate a value for {specs}')
      end
  }

  # Return a predicate which returns true iff the given value
  # fits all of the given specs

  pred
end

or.predicate = (specs[]) => do
  (specs:len > 0):assert! "The or predicate expects more than zero specs"
  
  pred = .string:make('predicate:any:' specs):sigils.into

  [pred] :defmodule! {
    \spec.fits? value => do
        valid = specs:reduce(.false (acc s) => do
          acc :else () => s :spec.fits? value
        end)

        (valid self value pred)
      end

    \spec.gen () => specs:at!(.number:int.between(0 specs:len - 1)):spec.gen

    \spec.explain () => explain_specs:(specs ' | ')
  }
  # Return a predicate which returns true if the given value
  # fits any of the given specs

  pred
end

#
# COMPOSE WITH REGEX
#
regex.null  = { .re.null .nil \meta { \name 're.null' } \path .nil}
regex.blank  = { .re.blank .nil \meta { \name 're.null' } \path .nil}
regex.empty = .true

re.null.t = regex.null ?
re.blank.t = regex.blank ?

\re.null?:def!(re.null.t, .true)
\re.null?:def!.false

\re.blank?:def!(re.blank.t, .true)
\re.blank?:def!.false

\re.empty?:def!(regex.empty .true)
\re.empty?:def!(re.blank.t, .true)
\re.empty?:def!.false

\re.either_null? :def! (other) => self:re.null? | other:re.null?

\re.first_empty? :def! () => self:re.empty?
\re.second_empty? :def! (other) => other:re.empty?

\re.first_blank? :def! () => self:re.blank?
\re.second_blank? :def! (other) => other:re.blank?

\re.both_empty? :def! (other) => self:re.empty? & other:re.empty?

\re.first_null? :def! () => self:re.null?
\re.second_null? :def! (other) => other:re.null?

re.atom.t = .shape:make(.re.atom \form \meta \path)

re.seq.t = .shape:make(.re.seq \forms \meta \path)
\re.seq?:def!(re.seq.t .true)
\re.seq?:def!.false

re.alt.t = .shape:make(.re.alt \forms \meta \path)
\re.alt?:def!(re.alt.t .true)
\re.alt?:def!.false
\re.empty?:def!(re.alt.t () => do
  res = self:forms:collect(.td:filter \re.empty? |> .td:take 1)
  res:empty?:!
end)

re.rep.t = .shape:make(.re.rep \form \meta \path)
\re.rep?:def!(re.rep.t .true)
\re.rep?:def!.false

stringify_forms = (forms, sep) => .string
  :make(
    "("
    forms:map \re.debug :join (.td:interpose sep)
    ")")

# regex constructors

[.re] :defmodule! {
  \atom (spec meta) => re.atom.t:make(.nil spec meta [])

  \seq (forms meta) => do
    forms = forms:skip \re.blank?

    forms :cond {
      f => f :any? \re.null? regex.null
      \empty?                regex.blank
      f => f :len == 1       forms :at 0 :unwrap
      .else                  re.seq.t:make(.nil forms meta [])
    }
  end

  \alt (forms meta) => do
    forms = forms:skip \re.null?

    forms :cond {
      #f => f :all? \re.empty? regex.blank
      f => f :len == 1        forms :at 0 :unwrap
      .else                   re.alt.t:make(.nil forms meta [])
    }
  end

  \rep (form meta) => form :cond {
        \re.null?  regex.blank
        \re.empty? regex.blank
        .else      re.rep.t:make(.nil form meta [])
    }
}

# Derivatives

\re.debug :defcase! {
  regex.empty "re.internal.empty"
  re.blank.t "re.internal.blank"
  re.null.t "re.internal.null"
  re.atom.t () => self:meta:name
  re.seq.t () => stringify_forms:(self:forms, " > ")
  re.alt.t () => stringify_forms:(self:forms, " | ")
  re.rep.t () => .string:make('*', self:form:re.name)
}
\re.debug :def! () => self:spec.into:spec.name

\re.name :defcase! {
  re.atom.t () => self:meta:name
  re.seq.t () =>  self:meta:name
  re.alt.t () => self:meta:name
  re.rep.t () => self:meta:name
}
\re.name :def! () => self:spec.into:spec.name

\re.d :defcase! {
  re.blank.t, e => regex.null  
  re.null.t,  e => regex.null
  regex.empty, e => regex.null

  re.atom.t e => do
    (ok, rest[]) = self:form:spec.into:spec.fits? e

    so_far = self:path

    path = so_far:push [self:re.name, e]

    (ok :and regex.blank :or regex.null :path(path), rest)
  end

 re.alt.t e => do
    forms = self:forms:map f => f :re.d e

    .re
      :alt(forms, self:meta)
      :path(self:path)
  end

  re.seq.t e => do
    (a, rest) = (self:forms:at! 0, self:forms:slice(1, self:forms:len))
    b = self:forms:at! 1

    new_a = a:re.d e
    new_b = b:re.d e

    no_a = a:re.empty

    so_far = self:path

    left = .re:seq(self:forms:put(0, new_a), self:meta):path (so_far:push [a:re.name, e])

    right = .re:seq(rest:put(0, new_b), self:meta):path (so_far:push [b:re.name, e])

    .re
      :alt(
        [left no_a :re.empty? :and right :or regex.null]
        self:meta)
  end

 re.rep.t e => do

    a = self:form

    new_a = a:re.d e

    so_far = a:path
    so_far = so_far:push(self:path:**)
    path = so_far:push [self:re.name, e]

    re = .re
      :seq(
        [new_a self],
        self:meta)
      :path(path)

    #("DERIVE REP ", self:re.debug, "by ", e):println
    #("\tRE: ", re:re.debug):println
    re
  end
}

# Types that can match up these re need to implement the head/tail interface
\re.head :defcase! {
  'record' () => self:at! 0
  'string' () => self:at 0
}

\re.tail :defcase! {
  'record' () => self:slice(1 self:len)
  'string' () => self:slice(1 self:len)
}

# Matching fns
\re.empty :def! () => (regex.null, [])

\re.empty :defcase! {
  re.null.t   () => (regex.null, self:path)
  re.blank.t  () => (regex.blank, self:path)
  regex.empty () => (regex.blank, [])
  re.rep.t    () => do
    (regex.empty, self:path)
  end
  re.seq.t    () => do
    forms = self:forms:map \re.empty

    #("EMPTY SEQ:"):println
    #("\tBEFORE: ", stringify_forms:(self:forms, ", ")):println
    #("\tAFTER: ", stringify_forms:(forms, ", ")):println
    #("\tPATH: ", self:path):println

    (.re:seq(forms self:meta), self:path)
  end
  re.alt.t    () => do
    forms = self:forms:map \re.empty

    #("EMPTY ALT:"):println
    #("\tBEFORE: ", stringify_forms:(self:forms, ", ")):println
    #("\tAFTER: ", stringify_forms:(forms, ", ")):println
    #("\tPATH: ", self:path):println

    p = self:forms:collect(
      .td:map \re.empty
      |> .td:filter \re.empty?
      |> .td:map \first
      |> .td:take 1)

    (.re:alt(forms, self:meta), p :at 0 :unwrap:or [])
  end
}

\match :defcase!{
# Naturally this only succeeds if the match is empty
# But what if one of the alt paths is empty?
  []?, (re) => do
    #("DONE: ", re:re.debug):println
    (re, path) = re :re.empty

    (re:re.empty?, path)
  end

  'record' (re) => do
    dre = re:re.d(self:re.head)

    self:re.tail:match dre
  end

  .true (tail ddc re) => do
    (re, path) = ddc :re.empty

    (re:re.empty?, path)
  end

  .false (tail dre re) => do
    tail:match dre
  end

  'string' re => do
    dre = re:re.d(self:re.head)

    tail = self:re.tail

    tail:len :== 0 :match (tail dre re)
  end
}

\re.into:def! () => .re:atom(self { \name self:spec.into:spec.name })

\pat :def!(
  spec.t
  (specs{}) => do
    pred = .string:make('predicate:values:' specs):sigils.into

    forms = specs:map (v k)
      => (v:spec.into:re.into:put_via(k \meta \name))

    re = .re:seq(forms {\name ""})

    \spec.fits?:def!(
      pred
      (value) => value :match re)

    \re.into:def!(pred re)

    pred
  end)

\cat :def!(
  spec.t
  (specs{}) => do
    pred = .string:make('predicate:values:' specs):sigils.into

    forms = specs:map (v k)
      => (v:spec.into:re.into:put_via(k \meta \name))

    re = .re:seq(forms {\name ""})

    \spec.fits?:def!(
      pred
      (values[]) => do
        values :match re
      end)

    \re.into:def!(pred re)

    pred
  end)

\alt :def!(
  spec.t
  (specs{}) => do
    (first rest[]) = specs**
    pred = .string:make('redicate:alt:' specs):sigils.into

    forms = specs:map (v k)
      => (v:spec.into:re.into:put_via(k \meta \name))

    re = .re:alt(forms { \name "" })

    \spec.fits?:def!(
      pred
      (values[]) => do
        values :match re
      end)

    \re.into:def!(pred re)

    pred
  end)

\* :def!(
  spec.t
  (spec) => do
    pred = .string:make('predicate:*:' {} ':' spec):sigils.into

    re = .re:rep(spec:spec.into:re.into, { \name "" })

    \spec.fits?:def!(
      pred
      (values[]) => values :match re)

    \re.into:def!(pred re)

    pred
  end)

\+ :def!(
  spec.t
  (name spec) => do
    pred = .string:make('predicate:+:' name ':' spec):sigils.into

    re = .re:seq(spec:spec.into:re.into, .re:rep(spec:spec.into:re.into), { \name name })

    \spec.fits?:def!(
      pred
      (values[]) => values :match re)

    \re.into:def!(pred re)

    pred
  end)

slice.predicate = (slice) => do
  protocol = self
  keys = protocol:spec.protocol.keys

  pred = .string:make('predicate:protocol:slice:' keys ':' slice):sigils.into

  \spec.fits?:def!(
    pred
    value => do
      keys:reduce([.true self value] (acc m) => do
# Check for a spec which corresponds to this message in the protocol
        acc:at! 0 :and acc :else () => do
          m :has? value :then () => do
            m:sigils.into:spec:ok?:then s => do
              s:spec.fits?(value :at! m)
            end
          end :or [.false, self, value, m]
        end
      end):**
    end)

  genit = .td:map (v) => do
    found = v:sigils.into:spec
    (v found:spec.gen)
  end

  \spec.gen:def!(
    pred
    () => keys:transduce(protocol \put genit))

  \spec.explain:def!(
    pred
    () => protocol:spec.exlain)

  pred
end


protocol.predicate = (protocol) => do
  pred = .string:make('predicate:protocol:' protocol):sigils.into

  [pred] :defmodule! {
    \spec.explain () => (protocol:len == 0)
        :and "[]"
        :or ("[ " + explain_values:(protocol, ', ') + " ]")

    \spec.protocol.keys [protocol**]

    \spec.slice slice.predicate
  }

  pred
end

list.predicate = spec => do
  pred = .string:make('predicate:list:' spec):sigils.into

  [pred] :defmodule! {
    \spec.fits? value => value:spec.fits_each? \values

    \spec.gen () => .list:make:push(spec:spec.gen)

    \spec.explain () => .string:make('list[' spec:spec.explain() ']')
  }

  pred
end

record.predicate = (k_spec v_spec) => do
  pred = .string:make('predicate:map:' k_spec ':' v_spec):sigils.into

  \spec.fits?:def!(
    pred
    value => do
      (value ? == 'record')
        :then(() => (.false self value))
        :else(() => do
          value :reduce(
            (v k) => do
              [ [k_spec, k], [v_spec, v] ] :spec.recursively
            end,
            )

          (.true, self, value)
        end)
    end)

  \spec.gen:def!(
    pred
    () => { k_spec:spec.gen,  v_spec:spec.gen })

  \spec.explain:def!(
    pred
    () => .string:make('Map[' k_spec:spec.explain ', ' v_spec:spec.explain ']'))

  pred
end

\spec.recursively :defcase! {
  # In the boolean cases, recurse if the spec matched
  # and bail early if it didn't
  .true (tail curr alt) => do
    tail:spec.recursively(alt**)
  end
  .false (tail curr alt) => do
    (self curr**)
  end
  # In the recursion cases, continue to check head 
  # until there is no tail
  .nil (alt[]) => do
    alt**
  end
  'record' (alt[]) => do
    (spec value) = self:head**

    (does_fit result[]) = spec:spec.fits? value

    does_fit :spec.recursively (self:tail, result alt)
  end
}

spec.block.Args = { \input .nil \output .nil \semantics .nil }?

spec.block.Application = { \input .nil \output .nil \semantics .nil \in .nil \out .nil }?

\spec.block.input_fits?:def!(
  spec.block.Application
  () => self:input:spec.fits?(self:in**))

\spec.block.output_fits?:def!(
  spec.block.Application
  () => self:output:spec.fits?(self:out**))

\spec.semantics_fits?:def!(
  .nil
  (input output) => (.true .nil [input output]))

\spec.semantics_fits?:def!(
  'block'
  (input output) => (self:(input output), self, [input output], .semantics))

block.predicate = (args semantics) => do
  args:assert.is? spec.block.Args

  pred = .string:make('predicate:block:' args ':' semantics):sigils.into

  \spec.fits?:def!(
    pred
    (input output) => do
      v = args
        :put(.input_value input)
        :put(.output_value output)

      v:first(
        \apply,
        [
          \spec.block.input_fits?,
          \spec.block.output_fits?,
          \spec.semantic_fits?,
        ],
        \options.into,
      )
    end)

  \spec.gen:def!(
    pred
    () => do
      block.gen = (input[]) => do
        .range:make 100 :transduce(0, () => do
          # Generate an output
          (output[]) = args:output:spec.gen

          v = args
            :put(.input_value input)
            :put(.output_value output)

          v:first(
            \apply,
            [
              \spec.block.input_fits?,
              \spec.block.output_fits?,
              \spec.semantic_fits?,
            ],
            \options.into,
          )
        end):unwrap!
      end
    end)

  \spec.check:def!(
    pred
    (block) => do
      .range:make 100 :transduce(() => do
        (input[]) = args:input:spec.gen

        args:input:spec.fits?(input**) :then do
          (output[]) = block:(input**)
          
          (.some, pred:(input, output))
        end
      end)
    end)
  
  pred
end

general_message.predicate = 'predicate:message' :sigils.into

\spec.fits?:def!(
  general_message.predicate
  (value) => (value:is_m?, self, value))

\spec.gen:def!(
  general_message.predicate
  \+)

\spec.explain:def!(
  general_message.predicate
  'message')

\spec.message.input_fits?:def!(
  'record'
  () => self:input:spec.fits?(self:in**))

\spec.message.output_fits?:def!(
  'record'
  () => self:output:spec.fits?(self:out**))

\spec.message.receiver_fits?:def!(
  'record'
  () => self:receiver:spec.fits?(self:rec**))

\spec.message.semantics_fits?:def!(
  'record'
  () => self
    :at \semantics
    :unwrap ()
    :spec.semantics_fits?(self:in, self:out))

\dospec.apply :defcase! {
  .true (v acc f) => [f : v]
  .false (v acc f) => acc
}

\-!> :def! (fs[]) => do
  me = self # I'd like doing this to be a little neater
  fs:reduce([.true]
    (so_far f) => so_far
      :at! 0
      :dospec.apply(me so_far f))**
end

\spec.message.define:defcase! {
  .nil general_message.predicate
  'record' () => do
    args = self
    pred = .string:make('predicate:message:' args):sigils.into

    \spec.fits?:def!(
      pred
      (rec in out)
        => args
          :put(\rec rec)
          :put(\in in)
          :put(\out out)
           -!>(\spec.message.receiver_fits?
               \spec.message.input_fits?
               \spec.message.output_fits?
               \spec.message.semantics_fits?))

    \spec.gen:def!(
      pred
      receiver => do
        args:message:def!(
          receiver
          (input[]) => do
            (ok pred value path) = args:receiver:spec.fits? self

            (ok pred value path) = ok
              :or (ok pred value path)
              :then () => args:input:spec.fits?(input**)

            ok
              :or (ok pred value path)
              :then () => do
                (ok pred value path) = args:input:spec.fits?(input**)
                (output[]) = args:output:spec.gen
                iter = .td:map(() => do
                    (output[]) = args:output:spec.gen

                    args:output:spec.fits?(output**) :then () => do
                      # If there are no semantics to satisfy, just return this output
                      (args:has? \semantics :else () => output**) :then () => do
                        rec = args:receiver:spec.gen

                        args:receiver:spec.fits?(rec) :then () => do

                          # Otherwise, we need to continue generating until we
                          # find a receiver and output which satisfy the semantics.
                          args:semantics:(input, output) :then () => do
                            # Return the generated output
                            (.ok output**)
                          end
                        end
                      end
                    end
                  end)            
                  |> .td:filter \ok?
                  |> .td:map \unwrap
                  |> .td:take 1

                .range :make 100 :transduce (.false \first iter)
          end
        end)

        args:message
      end)

    \spec.check:def!(
      pred
      () => do
        xf = .td:map(() => do
            receiver = args:receiver:spec.gen

            args:receiver:spec.fits?(receiver) :then () => do
              (input[]) = args:input:spec.gen

              args:input:spec.fits?(input**) :then () => do
                (output[]) = args:message:(receiver input**)

                (ok res[]) = args:output:spec.fits?(output**)
                
                 ok:then () => do
                  args:has? \semantics
                    :or (ok, res**)
                    :then () => do
                      args:semantics:(input output)
                        :and(ok, res**)
                        :or(.false, args:semantics, [input output], 'semantics')
                    end
                end
              end
            end
          end)
          |> .td:filter((valid? spec value path) => valid? !)
          |> .td:map((valid? spec value path) => .option:make(valid? !, spec value path))
          |> .td:take 1

        .range:make(100):transduce([.none] \all xf)**
      end)

    \spec.explain:def!(
      pred
      () =>.string:make(
        args:receiver:spec.name
        '.'
        args:message
        ' '
        args:input:spec.name
        ' => '
        args:output:spec.name))

    pred
  end
}

message.predicate = args => args:spec.message.define

LabeledSpec = { \spec.label .nil \spec.spec .nil }?

\spec.labeled :def! label => {
  \spec.label label
  \spec.spec self
}

[LabeledSpec] :defmodule! {
  \spec.explain () => .string:make(
      self:spec.label
      ': '
      self:spec.spec:spec.explain)

  \spec.name  () => do
    .string:make(
      self:spec.label
      ': '
      self:spec.spec:spec.name)
  end

  \spec.gen   () => self:spec.spec:spec.gen

  \spec.fits? () => self:spec.spec:spec.fits?

  \spec.check () => self:spec.spec:spec.check
}

\spec.name :def! () => self:spec.explain
\spec.explain :def! () => self
\spec.gen :def! () => self
\spec.fits? :def! value => (self == value self value)

# Since a spec is just a predicate, we can simply call it and return the result
\spec.fits?:def!(
  'block'
  (value) => self:(value))

\spec.fits?:def!(
  'message'
  (value) => do
    msg = self
    msg :has? value :then () => msg:(value)
  end)

\spec.option.into:defcase! {
  .nil err => do
    spec.t:any(.ok, err:or .err)    
  end
}

\spec.option.into:def! err => do
  value = self
  spec.t:any(
    spec.t:values(.ok, value),
    err:or .err,
  )
end

[spec.t] :defmodule! {
  \nil      nil.predicate,
  \unknown  unknown.predicate,
  \int      int.predicate,
  \float    float.predicate,
  \string   string.predicate,
  \shape    shape.predicate,
  \boolean  boolean.predicate,
  \block    block.predicate,
  \message  message.predicate,
  \list     list.predicate,
  \record   record.predicate,
  \protocol protocol.predicate,
  \all      and.predicate,
  \any      or.predicate,
  \option  value => spec.t:any(
                      spec.t:values(.ok, value),
                      .none)
  \result  (value err) => value:spec.option.into err
  \gt (min) => do
    gt.predicate = .string:make('predicate:gt:' min):sigils.into

    \spec.fits?:def!(
      gt.predicate
      (value) => (value > min, self, value))

    \spec.explain:def!(gt.predicate, '> {min}')

    gt.predicate
  end
  \lt max => do
    lt.predicate = .string:make('predicate:lt:' max):sigils.into

    \spec.fits?:def!(
      lt.predicate
      (value) => (value < max, self, value))

    \spec.explain:def!([lt.predicate] '< {max}')

    lt.predicate
  end

  \doc (mod) => do
    xf = .td:map ((v k) => (
          v
          k :strings.into
            :split '.'
            :sigils.into,
          k))
      |> .td:filter ((_ k) => k == mod)
      |> .td:map ((v m k) => do
        (h e) = k:spec.doc!
        .string:make(k '\n' h '\n\t' e)
      end)
      |> .td:interpose '\n\n'

    .message
      :specializations
      :spec
      :transduce("" \+ xf)
  end
}

spec.t
