s = 'specs':use

socket.spec = s:def! {
  name = "gab.socket",
  help = "A wrapper type for an OS socket.",
  spec = .gab.socket, # TODO: Replace with some c-user-data spec
}

s:def! {
  name = "socket",
  help = "Construct a new gab.socket",
  spec = s:message {
    receiver  = .gab.socket,
    message   = \,
    input     = s:nilable(s:protocol {
      gab.socket.family = s:int,
      gab.socket.type   = s:int,
    }),
    output    = socket.spec,
    semantics = .nil
  }
}

s:def! {
  name = "connect",
  help = "Connect a socket to a host and port",
  spec = s:message {
    receiver  = socket.spec,
    message   = \connect,
    input     = s:values(
      s:string :spec.label 'host',
      s:int    :spec.label 'port',
    ),
    output    = s:result,
    semantics = .nil
  }
}

s:def! {
  name = "send",
  help = "Send data on a socket",
  spec = s:message {
    receiver  = socket.spec,
    message   = \send, 
    input     = s:string :spec.label 'data',
    output    = s:result,
    semantics = .nil
  }
}

s:def! {
  name = "recv",
  help = "Receive data on a socket",
  spec = s:message {
    receiver  = socket.spec,
    message   = \recv,
    input     = s:values, 
    output    = s:result(s:string),
    semantics = .nil
  }
}

s:def! {
  name = "bind",
  help = "Bind a socket to a port",
  spec = s:message {
    receiver  = socket.spec,
    message   = \bind,
    input     = s:any(
      s:int :spec.label 'port',
      s:protocol {
        host = s:string,
        port = s:int,
      },
    ),
    output    = s:result,
    semantics = .nil,
  }
}

s:def! {
  name = "accept",
  help = "Block until a socket accepts a connection",
  spec = s:message {
    receiver  = socket.spec,
    message   = \accept,
    input     = s:values,
    output    = s:result,
    semantics = .nil
  }
}

s:def! {
  name = "listen",
  help = "Prepare to accept connections",
  spec = s:message {
    receiver  = socket.spec,
    message   = \listen,
    input     = s:int :spec.label 'port',
    output    = s:result,
    semantics = .nil,
  }
}

socket.spec
