messages.t :: 'cmessages':use
channels.t :: 'cchannels':use
numbers.t  :: 'cnumbers':use
records.t  :: 'crecords':use
strings.t  :: 'cstrings':use
sigils.t   :: 'csigils':use
iter       :: 'iter':use

'format':use

\strings.into :def! do; '{self}'; end

truthy_values :: []
falsey_values :: [.nil, .false, .none, .err]

\self :def! do; self; end
\first :def! do x; x;end
\second :def! do _, x; x; end
\all :def! do xs[]; xs; end

\is? :def! do other; self ? == other; end

truthy_values :defmodule! {
  \and: do alt[]; alt**; end,
  \then: do f; f(self); end,
  \or: do; self; end,
  \else: do; self; end,
  \assert!: do; self; end,
}

falsey_values :defmodule! {
  \and: do; self; end,
  \then: do; self; end,
  \or: do alt[]; alt**; end,
  \else: do f; f(self); end,
  \assert!: do msg; 'Assert failed: {msg}':panic; end,
  \options.into: .none,
  \results.into: .err,
}

[] :defmodule! {
  \options.into: do args[]; (.ok, self, args**); end,
  \results.into: do args[]; (.ok, self, args**); end,
}

\ :def! (.gab.option, do cond, data[]
  (cond:options.into, data**)
end)

\ :def! (.gab.result, do cond, data[]
  (cond:results.into, data**)
end)

[.ok] :defmodule! {
  \ok?: do args[]
    (.true, args**)
  end,
  \unwrap: do args[]
    args**
  end,
  \unwrap!: do args[]
    args**
  end,
}

[] :defmodule! {
  \ok?: .false,
  \unwrap: .nil,
  \unwrap!: do msg
    '{\unwrap} failed on {self}: {msg}':panic
  end,
}

\doreduce :defcase! {
  ## The sequence continues
  .ok: do seq.i, seq.v, acc, r, xs
    # Apply the reducer
    cmd, r, acc :: r:reduce.step(acc, xs**)
    # proceed to the next sep
    cmd:doreduce(seq.i, seq.v, acc, r)
  end,
  ## The sequence is done
  .none: do seq.i, seq.v, acc, r
    r:reduce.done(acc)
  end,
  ## The reducer continues
  .next: do seq.i, seq.v, acc, r
    # Apply the producer, resolving new values for the next step
    ok, seq.v, xs[] :: seq.i :seqs.next seq.v
    # Tailcall to the next step
    ok:doreduce(seq.i, seq.v, acc, r, xs)
  end,
  ## The reducer is done
  .stop: do seq.i, seq.v, acc, r
    r:reduce.done(acc)
  end,
}

\def.seq! :def! do
  [self] :defmodule! {
    \reduce: do acc, r
      ok, seq.v, xs[] :: self :seqs.init
      ok:doreduce(self, seq.v, acc, r, xs)
    end,
    \transduce: do acc, r, td
      self:reduce(acc, td :iter.apply r)
    end,
    \each: do f
      self:transduce(.nil, \all, iter:tap f)
    end,
    \map: do f
      self:collect(iter:map f)
    end,
    \filter: do f
      self:collect(iter:filter f)
    end,
    \join: do xf
      self:transduce("", \+, xf)
    end,
    \collect: do xf
      self:transduce({}, \push, xf)
    end,
  }
end

# Channel's implementation of the seq protocol.
# It isn't totally true to the requirements - 
# The keys aren't a pure function, because channels
# Forget about their values as soon as their taken
[channels.t] :defmodule! {
  \seqs.init: do
    ok, v :: self >!
    (ok, v, v)
  end,
  \seqs.next: do
    ok, v :: self >!
    (ok, v, v)
  end,
}

channels.t :def.seq!

# Implement the reducer protocol for blocks and messages
['gab.block', 'gab.message'] :defmodule! {
  \reduce.step: do acc, xs[]
    (.next, self, self(acc, xs**))
  end,
  \reduce.done: do acc
    acc
  end,
}

[records.t] :defmodule! {
  \has?: do key
    self:at key :ok?
  end,
  \at!: do key
    self:at key :unwrap!
  end,
}

records.t :def.seq!

\ :def! (.int.between, do min, max
  .float.between (min,max) :floor
end)


range.t :: { \from: .nil, \to: .nil }?

range.t :def.seq!

[range.t] :defmodule! {
  \seqs.init: do
    (.ok, self:from, self:from)
  end,
  \seqs.next: do n
    nx :: n + 1
    .gab.option (n < self:to, nx, nx)
  end,
}

\range.into :defcase! {
  .nil: do to
    { \from: 0, \to: to }
  end,
  'gab.number': do from
    { \from: from, \to: self }
  end,
}

\ :def! (.gab.range, do from, to
  (to, from) :range.into
end)

\is_n? :def! .false
\is_n? :def! (numbers.t, .true)

\numbers.into :def! (falsey_values, 0)

[numbers.t] :defmodule! {
  \->: do to
    (to, self) :range.into
  end, 
  \++: do; self + 1; end,
  \--: do; self - 1; end,
  \even?: do; (self % 2):= 0; end,
  \odd?: do; self:even?:!; end,
  \pos?: do; self > 0; end,
  \neg?: do; self < 0; end,
  \numbers.into: do; self; end,
}
