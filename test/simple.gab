:use .records
:use .streams
:use .dis

nums = [ 0, 1, 2, 3, 4, 5 ]

nums:print 'nums'

nums_times_two = nums:tuple.collect(
  &:map,
  &:pairs,
  => @2 * 2,
  nums:len,
)

nums_times_two:print 'times two'

filtered_nums = nums:tuple.collect(
  &:filter,
  &:pairs,
  => @2 % 2 == 0,
  nums:len / 2,
)

filtered_nums:print 'filtered'

take_filtered = nums:tuple.collect(
  &:take,
  &:filter,
  &:pairs,
  => @1 % 2 == 0,
  2,
  2,
)

take_filtered:print 'take filtered'

nums:for(
  &:take,
  &:map,
  &:filter,
  &:pairs,
  => @1 % 2 == 0,
  => @2 * 2,
  2,
  &:print,
)

take_filtered_mapped_total = nums:fold(
  &:take,
  &:map,
  &:filter,
  &:pairs,
  => @1 % 2 == 0,
  => @2 * 2,
  2,
  0,
  &+,
)

take_filtered_mapped_total:print

first = nums:first(
  &:map,
  &:filter,
  &:pairs,
  => @1 % 2 == 0,
  => @2 * 2,
  => (@1 == 4) :and => return .some, .hi,
)

first:print


#&:_streams.take :dis .gab.suspense
