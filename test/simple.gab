'iter' :use
'lists' :use
'numbers' :use
'transducers' :use

\self :def! ([], do; self end)

list = .gab.list :make

list:push!(1,2,3,4)

test = list:lists.collect(\values, .td :filter \pos? )

test:tap(\values, .nil, \self, \print)

sum = list:reduce(\values, 0, \+)
'reduce with \+: {sum}':print

sum = list:transduce(\values, 0, \+, .td :map \++)
'transduce with \+ and map \++: {sum}':print

sum = list:map(\values, 0, \+, \++)
'map with \++, reduce with \+: {sum}':print

mapped_add_one = list:map(\values, .gab.list :make, \push!, \++)

'map with \++, reduce with \push!:':print

mapped_add_one:tap(\values, .nil, \self, \print)

filtered = list:filter(\values, .gab.list :make, \push!, \even?)

'filter with even?, reduce with \push!:':print

filtered:tap(\values, .nil, \self, \print)

first_two = list:take(\values, .gab.list :make, \push!, 2)

'took 2, reduce with \push!':print

first_two:tap(\values, .nil, \self, \print)

partition_by = list:partition(\values, .gab.list :make, \push!, 2)

'partition by 2, reduce with \push!':print

partition_by:tap(\values, .nil, \self, \print)
