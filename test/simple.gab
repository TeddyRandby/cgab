'fiber':require  

server = :fiber do
  def sk = 'socket':require

  status, socket = :socket { family = sk.AF_INET type = sk.SOCK_STREAM } in
    match
      .ok => socket:print end
      else => status:print end

  def port = 8080

  { status, socket, port }:print

  status = socket:bind { family = sk.AF_INET port } in
    match
      .ok => 'Bound to ::{port}':print end
      else => status:print end

  { status, socket, port }:print

  status = socket:listen(10) in
    match
      .ok => 'Listening!':print end
      else => status:print end

  { status, socket, port }:print

  yield .ok

  'Accepting connections...':print

  { status, socket, port }:print

  status, conn = socket:accept

  { status, socket, port, conn }:print
end

server:await:print

client = :fiber do
  def sk = 'socket':require

  status, socket = :socket { family = sk.AF_INET type = sk.SOCK_STREAM } in
    match
      .ok => socket:print end
      else => status:print end

  status = socket:connect('127.0.0.1', 8080) in
    match
      .ok => 'Connected!':print end
      else => status:print end
end

server(.ok)

client:await

server:await
