require('std')
require('Test')

:describe('Suspensions') do
    def once = do
        yield 1
        2
    end

    def twice = do
        yield 1
        yield 2

        3
    end

    def receive_one = do
        val = yield

        1:expect(val)
    end

    def receive_onetwo = do
        one, two = yield
        
        1:expect(one)
        2:expect(two)
    end

    def onetwo = do
        return 1,2 
    end

    def yields_many = do
        yield onetwo()
    end

   :it('should yield once') do
       val, eff = once()

       1:expect(val)
       2:expect(eff())
   end

   :it('should yield twice') do
       _, eff = twice()

       valtwo, efftwo = eff()

       2:expect(valtwo)
       3:expect(efftwo())
   end

   :it('should receive a value') do
       eff = receive_one()

       eff(1)
   end

   :it('should yield var') do
       one, two, eff = yields_many()
       1:expect(one)
       2:expect(two)
   end

   :it('should receive var') do
       eff = receive_onetwo()

       eff(onetwo())
   end
end

:describe('Lists') do
    :it('should create') do
        list = :list(100)

        list:expect_not(nil)
    end

    :it('should put') do
        list = :list

        list:at(0):expect(nil)

        list:push('hello')

        list:at(0):expect('hello')

        list:put(2, 'hello')

        list:at(2):expect('hello')
    end

    :it('should get/set') do
        list = :list

        list[0]:expect(nil)

        list[0] = 5

        list[0]:expect(5)

        list[10] = 10

        list[10]:expect(10)

        list[9]:expect(nil)
    end

    :it('should index with range') do
        list = :list(5):map! do (_, i) i + 1 end

        slice = list[3:to]

        slice[0]:expect(1)
        slice[2]:expect(3)

        slice = list[3:to(4)]

        slice[0]:expect(4)
        slice[1]:expect(nil)
    end
end
