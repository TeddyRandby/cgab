iter = 'iter' :use

\do_acc :defcase! {
  .true  (acc) => acc
  .false (acc, n) => [n, acc:acc(n - 1)**]
}

\acc :def!('gab.record', n => do
  n :== 0 :do_acc (self, n)
end)

\go :def!('gab.block', _ => do
  .gab.fiber self
end)

in, out = .gab.channel(), .gab.channel()

work = _ => do
  n = in >! :unwrap!

  out <! [] :acc n :len
end

# Insert 100 values into the channel 
fib = _ => do
  .gab.range(100, 200):transduce(
      100
      \first
      iter:tap x => in <! x)
end :go

{ fib } :print

# Take a hundred values from the out channel
res = _ => do
  xf = iter:take 100 |> iter:tap \print

  out :transduce(.nil, \first, xf)
end :go

{ res } :print

# Spawn 100 workers
.gab.range(100,200):transduce(
    100
    \first
    iter:tap _ => work:go)
