'tests' :use

'Multiple Assignment' :tests.covers do:
    'declare new variables' :tests.should do:
        a = 2

        a:should.be(\==, 2)

        a = 3

        a:should.be(\==, 3)
    end

    'assign multiple variables' :tests.should do:
        a, b = 1, 2

        a:should.be(\==, 1)
        b:should.be(\==, 2)

        a, b = b, a
        a:should.be(\==, 2)
        b:should.be(\==, 1)
    end

    'reassign' :tests.should do:
      a, b, c, d = 1, 2, 3, 4

      a:should.be(\==, 1)
      b:should.be(\==, 2)
      c:should.be(\==, 3)
      d:should.be(\==, 4)

      a, c, d, e = 5, 6, 7, 8

      a:should.be(\==, 5)
      c:should.be(\==, 6)
      d:should.be(\==, 7)
      e:should.be(\==, 8)
    end

    'rest assign a constant multi value' :tests.should do:
        a, b, c[] = 1, 2, 3, 4, 5

        a:should.be(\==, 1)
        b:should.be(\==, 2)
        c:at!(0):should.be(\==, 3)
        c:at!(1):should.be(\==, 4)
        c:at!(2):should.be(\==, 5)
    end

    'rest assign a constant multi value in middle' :tests.should do:
        a, b[], c = 1, 2, 3, 4, 5

        a:should.be(\==, 1)
        c:should.be(\==, 5)
        b:at!(0):should.be(\==, 2)
        b:at!(1):should.be(\==, 3)
        b:at!(2):should.be(\==, 4)
    end

    'rest assign a runtime multi value' :tests.should do:
        one_through_five = do: (1,2,3,4,5) end

        a[], b, c = one_through_five ()

        b:should.be(\==, 4)
        c:should.be(\==, 5)
        a:at!(0):should.be(\==, 1)
        a:at!(1):should.be(\==, 2)
        a:at!(2):should.be(\==, 3)
    end

    'rest assign to existing variables' :tests.should do:
        one_through_five = do: (1,2,3,4,5) end

        b = 1

        a, b[], c = one_through_five ()

        a:should.be(\==, 1)
        c:should.be(\==, 5)
        b:at!(0):should.be(\==, 2)
        b:at!(1):should.be(\==, 3)
        b:at!(2):should.be(\==, 4)
    end
end

'Numbers' :tests.covers  do:
  'should be equal to itself' :tests.should do:
    5 :should.be(\==, 5)
  end

  'should do math' :tests.should do:
    10:should.be(\==, 5 * 2)
    1:should.be(\==, 10 % 3)
    8:should.be(\==, 1 << 3)
  end

  'should compare' :tests.should do:
    (5 < 10):should.be(\==, .true)
    (10 > 5):should.be(\==, .true)
  end

  'should dynamically do arithemtic' :tests.should do:
    1:send(\+, 2):should.be(\==, 3)
    1:send(\+,2, .ignore_me):should.be(\==, 3)
    1:send(\-,2):should.be(\==, -1)
  end
end

'Strings' :tests.covers do:
  'should be equal to itself' :tests.should do:
    'hello' :should.be(\==, 'hello')
  end

  'should concatenate' :tests.should do:
    'hello world':should.be(\==, 'hello' + ' world')
  end

  'should interpolate' :tests.should  do:
    '{'hi'} {'world'}':should.be(\==, 'hi world')
  end

  'should dynamically concatenate' :tests.should do:
    'hi ':send(\+, 'world'):should.be(\==, 'hi world')
    'hi ':send(\+, 'world', .ignore_me):should.be(\==, 'hi world')
  end

  'should append a sigil' :tests.should do:
    'hi ':send(\+, .world):should.be(\==, 'hi world')
    ('hi ' + .world) :should.be(\==, 'hi world')
  end
end

'Blocks' :tests.covers do:
    a = 1

    'should capture' :tests.should  do:
        a:should.be(\==, 1)

        test = do:
           a:should.be(\==, 1)
           a  
        end

        test():should.be(\==, 1)
    end

   'should work with varargs' :tests.should  do:
      varfunc = do first, args[]:
        first:should.be(\==, 1)
        args:at!(0):should.be(\==, 2)
      end

      varfunc(1,2)

      onetwo = do: (1, 2) end

      varfunc(onetwo())
   end

   'should work more with varargs' :tests.should do:
      varfunc = do first, args[], last:
        first:should.be(\==, 1)
        args:at!(0):should.be(\==, 2)
        last:should.be(\==, 3)
      end

      varfunc(1,2,3)

      onetwothree = do: (1, 2, 3) end

      varfunc(onetwothree())
   end

   'should make var args empty when necessary' :tests.should do:
      varfunc = do first, args[], other, last:
        first:should.be(\==, 1)
        args:len:should.be(\==, 0)
        other:should.be(\==, 2)
        last:should.be(\==, .nil)
      end

      varfunc(1,2)

      onetwo = do: (1, 2) end

      varfunc(onetwo())

   end
end

'Records' :tests.covers do:
  Point = { x, y }?

  'should have properties' :tests.should do:
    point = {
      x = 1,
      y = 2
    }

    point:x:should.be(\==, 1)
    point:y:should.be(\==, 2)
  end

  'should be structurally shaped' :tests.should do:
    pone = { x = 1, y = 2}
    ptwo = { x = 3, y = 4}

    (pone:?):should.be(\==, ptwo:?)
  end

  'should work for all kinds of keys' :tests.should do:
    obj = {
        [{}?] = 3,
        [.hi] = 4
    }

    3:should.be(\==, obj:at!({}?))
    4:should.be(\==, obj:at!(.hi))
  end


  'should make tuples' :tests.should do:
    tup = [ 1, 2, 3 ]

    tup:at!(0):should.be(\==, 1)
    tup:at!(1):should.be(\==, 2)
    tup:at!(2):should.be(\==, 3)
  end

  'should make var tuples' :tests.should do:
    onetwothree = do:
      (1, 2, 3)
    end

    tup = [ onetwothree() ]
    tup:at!(0):should.be(\==, 1)
    tup:at!(1):should.be(\==, 2)
    tup:at!(2):should.be(\==, 3)
    tup:len:should.be(\==, 3)
  end
end

'Overloads' :tests.covers do:
    vec.t = { x, y }?

    \+ :def!([vec.t], do other:
      {
        x = self:x + other:x,
        y = self:y + other:y,
      }
    end)

    'should overload binary' :tests.should do:
        a = { x = 1, y = 2 }
        b = { x = 2, y = 1 }
        test = a + b

        test:x:should.be(\==, 3)
        test:y:should.be(\==, 3)
    end

      \< :def!([vec.t], do other:
        mag = ((self:x) * (self:x)) + ((self:y) * (self:y))
        other_mag = ((other:x) * (other:x)) + ((other:y) * (other:y))
        mag < other_mag
      end)

      \== :def!([vec.t], do other:
        (self:x == other:x) & (self:y == other:y)
      end)

    'should overload comparison' :tests.should do:
        a = { x = 1, y = 1 }
        b = { x = 1, y = 1 }
        a:should.be(\==, b)
        b = { x = 4, y = 4 }
        (a < b):should.be(\==, .true)
    end

    get = do obj, key:
        obj:at!(key)
    end

    'should get before overload' :tests.should do:
        get({ x = 1, y = 2 }, \x):should.be(\==, 1)
    end

      \at! :def! ([vec.t], do key:
        v = self
        (key == 'mag') :then do:
          ((v:x) * (v:x)) + ((v:y) * (v:y))
        end
      end)

    'should overload get' :tests.should do:
        get({ x = 2, y = 2 },'mag'):should.be(\==, 8)
    end

    'should behave when switching types' :tests.should do:
      sum = do a, b:
        a + b
      end

      3:should.be(\==, sum(1,2))
      a = { x = 3, y = 3 }
      b = { x = 1, y = 2 }
      c = { x = 2, y = 1 }
      a:should.be(\==, sum(b, c))
      'hi':should.be(\==, sum('h','i'))
      'hi':should.be(\==, sum('h','i'))
      a:should.be(\==, sum(b, c))
      3:should.be(\==, sum(1,2))
    end
end

'Messages' :tests.covers do:
    \test :def! ([], do:
        self    
    end)

    'should send' :tests.should do:
        1:should.be(\==, 1:test)
    end

    \test :def! (['gab.number'], do:
        self + 1
    end)

    'should use more specific' :tests.should do:
        1:test:should.be(\==, 2)
    end

    repeat = do: 1:test end

    'should cache' :tests.should do:
        repeat():should.be(\==, 2)
        repeat():should.be(\==, 2)
        repeat():should.be(\==, 2)
    end

    oneTwo = do: (1, 2) end

    'should send/receive var' :tests.should do:
      takeOneTwo = do a, b:
        1:should.be(\==, a)
        2:should.be(\==, b)
      end

      takeOneTwo(oneTwo())
    end

    'sending constants' :tests.should do:
      \hi :def! (['gab.number'], .test)

      1:hi:should.be(\==, .test)
    end

    'dynamic message sends' :tests.should do:
      sum = do a, b:
        a:send(\+, b)
      end

      result = sum(1,1)

      result:should.be(\==, 2)

      result = sum(2, 2)

      result:should.be(\==, 4)

      result = sum('hi', ' world')

      result:should.be(\==, 'hi world')

      result = { hi = 8 }:send \hi

      result:should.be(\==, 8)

      result = { hi = 8 }:send(\put, \hi , 2)

      result:hi:should.be(\==, 2)

      result = ['hi']:send \** 

      result:should.be(\==, 'hi')

      result = { hi }:send(\hi, 4)

      result:hi:should.be(\==, 4)

      result = { hi = do: 8 end }:send \hi 

      result:should.be(\==, 8)
    end
end
