def describe(name, cb)
  ('\n--{name}--'):print
  cb()
end

def it(name, cb)
  print('{cb() and '✓' or '×'} it {name}')
end

def check(result, msg)
  result or print(msg)
end

def expect[](other)
  if not check(self == other, 'Expected {self} to be equal to {other}')
    panic()
  end

  true
end

describe('Numbers', do ()
  it('should be equal to itself', do ()
    5:expect(5)
  end)
  it('should do math', do ()
    (5 * 2):expect(10)
    (10 % 3):expect(1)
  end)
end)

describe('Strings', do ()
  it('should be equal to itself', do ()
    'hello':expect('hello')
  end)

  it('should concatenate', do ()
    ('hello' + ' world'):expect('hello world')
  end)

  it('should interpolate', do ()
    ('{1} + {2} is {1 + 2}'):expect('1 + 2 is 3')
  end)
end)


describe('Closures', do ()
    let a = 1

    it('should capture', do ()
        a:expect(1)

        def test()
           a:expect(1)
           a  
        end

        test():expect(1)
        test():expect(1)
        test():expect(1)
    end)

    it('should capture by reference', do ()
        let b = 2

        def addOne()
            b = b + 1
        end

        b:expect(2)

        addOne()

        b:expect(3)

        addOne()
        addOne()

        b:expect(5)
    end)

   it('should work with varargs', do()

      def varfunc(first, [args])
        first:expect(1)
        args[0]:expect(2)
      end

      varfunc(1,2)

      def onetwo()
        return 1, 2
      end

      varfunc(onetwo())
   end)
end)

describe('Records', do ()
  def Point { x y }

  it('should have properties', do ()
    let point = {
      x = 1
      y = 2
    }

    point.x:expect(1)
    point.y:expect(2)
  end)

  it('should be structurally shaped', do ()
    let pone = { x = 1 y = 2}
    let ptwo = { x = 3 y = 4}

    (pone?):expect(ptwo?)
  end)

  it('should set properties dynamically', do ()
    let obj = { [[]?] = 'test' }
    obj['y'] = 2

    (obj.y):expect(2)
    (obj[[]?]):expect('test')
  end)

  it('should work for all kinds of keys', do ()
    let obj = {}
    obj[obj] = 2
    obj[{}?] = 3

    let i = do ()
      1
    end

    obj[i] = i 

    obj[obj]:expect(2)
    obj[{}?]:expect(3)
    obj[i]:expect(i)
  end)

  it('should make a var array', do ()
    def abcd()
        return 'a', 'b', 'c', 'd'
    end

    let list = [abcd()]

    list[0]:expect('a')
    list[1]:expect('b')
    list[2]:expect('c')
    list[3]:expect('d')
    list[4]:expect(nil)
  end)

  it('should work through cache', do ()
    let num = 2 
    let a = { [it] = num }

    def test()
        num = (a[it] or 0) + 1 # Test the reading cache
        a[it] = num            # Test the writing cache
    end

    a[it]:expect(2)

    test()
    test() # Prime the cache

    a.s = 2 # Change the shape

    test()

    a[it]:expect(5)

    a = { b = 5 } # Change the object
    test()

    a[it]:expect(1)
  end)

  it('should work when shapes change', do ()
    let obj = { }
    def get_a()
        obj.a
    end
    
    get_a():expect(nil)

    obj.a = 1

    get_a():expect(1)

    obj.a = obj.a + 1

    get_a():expect(2)

    obj.b = obj.a = obj.a + 1

    get_a():expect(3)

    obj.b = obj.a = obj.a + 1

    get_a():expect(4)
  end)
end)

describe('Overloads', do ()
    def Vector { x y }

    def __add__[Vector](other)
        if other is Vector
            {
                x = self.x + other.x
                y = self.y + other.y
            }
        end
    end

    it('should overload binary', do ()
        let test = { x=1 y=2 } + { x=2 y=1 }

        test.x:expect(3)
        test.y:expect(3)
    end)

    def __lt__[Vector](other)
        if other is Vector
            let mag = self.x * self.x + self.y * self.y
            let other_mag = other.x * other.x + other.y * other.y

            mag < other_mag
        end
    end

    def __eq__[Vector](other)
        (self.x == other.x) and (self.y == other.y)
    end

    it('should overload comparison', do ()
        let test = { x=1 y=1 } < { x=4 y=4 }
        test:expect(true)

        test = { x=1 y=1 } == { x=1 y=1 }

        test:expect(true)
    end)

    def __get__[Vector](key)
       if key == 'mag' 
        self.x * self.x + self.y * self.y
       end
    end

    it('should overload get', do ()
        { x = 2 y = 2 }['mag']:expect(8)
    end)
end)

describe('Messages', do ()
    def test[]
        self    
    end

    it('should send', do ()
        1:test:expect(1)
    end)

    def test[1?](a)
        self + 1
    end

    it('should use more specific', do ()
        1:test:expect(2)
    end)

    def repeat()
        1:test
    end

    it('should cache', do ()
        repeat():expect(2)
        repeat():expect(2)
        repeat():expect(2)
    end)

    def oneTwo()
      return 1, 2
    end

    it('should send/receive var', do ()
      def takeOneTwo(a, b)
        a:expect(1)
        b:expect(2)
      end

      takeOneTwo(oneTwo())
    end)
end)

describe('Effects', do ()
    def once()
        yield 1
        2
    end

    def twice()
        yield 1
        yield 2

        3
    end

    def receive_one()
        let val = yield

        val:expect(1)
    end

    def receive_onetwo()
        let one, two = yield
        
        one:expect(1)
        two:expect(2)
    end

    def onetwo()
        return 1,2 
    end

    def yields_many()
        yield onetwo()
    end

   it('should yield once', do ()
       let val, eff = once()

       val:expect(1)
       eff():expect(2)
   end)

    it('should yield twice', do()
        let _, eff = twice()

        let valtwo, efftwo = eff()

        valtwo:expect(2)
        efftwo():expect(3)
    end)

   it('should receive a value', do ()
       let eff = receive_one()

       eff(1)
   end)

   it('should yield var', do ()
       let one, two, eff = yields_many()
       one:expect(1)
       two:expect(2)
   end)

   it('should receive var', do ()
       let eff = receive_onetwo()

       eff(onetwo())
   end)
end)
