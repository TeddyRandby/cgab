.tests :use
.numbers :use
.any :use

'Multiple Assignment' :tests.covers do
    'declaring new variables' :tests.should do
        a = 2

        a:should(\be, \==, 2)

        a = 3

        a:should(\be, \==, 3)
    end

    'should assign multiple variables' :tests.should do
        a, b = 1, 2

        a:should(\be, \==, 1)
        b:should(\be, \==, 2)

        a, b = b, a
        a:should(\be, \==, 2)
        b:should(\be, \==, 1)
    end

    'should reassign' :tests.should do
      a, b, c, d = 1, 2, 3, 4

      a:should(\be, \==, 1)
      b:should(\be, \==, 2)
      c:should(\be, \==, 3)
      d:should(\be, \==, 4)

      a, c, d, e = 5, 6, 7, 8

      a:should(\be, \==, 5)
      c:should(\be, \==, 6)
      d:should(\be, \==, 7)
      e:should(\be, \==, 8)
    end

    'should rest assign a constant multi value' :tests.should do
        a, b,..c = 1, 2, 3, 4, 5

        a:should(\be, \==, 1)
        b:should(\be, \==, 2)
        c:at(0):should(\be, \==, 3)
        c:at(1):should(\be, \==, 4)
        c:at(2):should(\be, \==, 5)
    end

    'should rest assign a constant multi value in middle' :tests.should do
        a, ..b, c = 1, 2, 3, 4, 5

        a:should(\be, \==, 1)
        c:should(\be, \==, 5)
        b:at(0):should(\be, \==, 2)
        b:at(1):should(\be, \==, 3)
        b:at(2):should(\be, \==, 4)
    end

    'should rest assign a runtime multi value' :tests.should do
        one_through_five = do; (1,2,3,4,5) end

        ..a, b, c = one_through_five:()

        b:should(\be, \==, 4)
        c:should(\be, \==, 5)
        a:at(0):should(\be, \==, 1)
        a:at(1):should(\be, \==, 2)
        a:at(2):should(\be, \==, 3)
    end

    'should rest assign to existing variables' :tests.should do
        one_through_five = do; (1,2,3,4,5) end

        b = 1

        a, ..b, c = one_through_five:()

        a:should(\be, \==, 1)
        c:should(\be, \==, 5)
        b:at(0):should(\be, \==, 2)
        b:at(1):should(\be, \==, 3)
        b:at(2):should(\be, \==, 4)
    end

    'should mix locals and properties' :tests.should do
        a = { b, c }

        a:b, d, a:c = 1, 2, 3

        a:b:should(\be, \==, 1)
        d:should(\be, \==, 2)
        a:c:should(\be, \==, 3)

        e, a:b, a:c = 1, 2, 3

        e:should(\be, \==, 1)
        a:b:should(\be, \==, 2)
        a:c:should(\be, \==, 3)

        a:c, a:b, e = 1, 2, 3:should(1)

        a:c:should(\be, \==, 1)
        a:b:should(\be, \==, 2)
        e:should(\be, \==, 3)
    end

    'should mix locals and sets' :tests.should do
        a = { b, c }

        a:put!(.b), d, a:put!(.c) = 1, 2, 3

        a:b:should(\be, \==, 1)
        d:should(\be, \==, 2)
        a:c:should(\be, \==, 3)

        e, a:put('b'), a:put!('c') = 1, 2, 3

        e:should(\be, \==, 1)
        a:b:should(\be, \==, 2)
        a:c:should(\be, \==, 3)

        a:put!('c'), a:put!('b'), e = 1, 2, 3

        a:c:should(\be, \==, 1)
        a:b:should(\be, \==, 2)
        e:should(\be, \==, 3)
    end
end

'Numbers' :tests.covers  do
  'should be equal to itself' :tests.should do
    5 :should 5
  end

  'should do math' :tests.should do
    10:should (\be, \==, 5 * 2)
    1 :should (\be, \==, 10 % 3)
    8 :should (\be, \==, 1 << 3)
  end

  'should compare' :tests.should do
    (5 < 10):should(\be, \==, true)
    (10 > 5):should(\be, \==, true)
  end

  'should dynamically do numberics' :tests.should do
    (1:{\+}(2)):should(\be, \==, 3)
    (1:{\-}(2)):should(\be, \==, -1)
  end
end

'Strings' :tests.covers do
  'should be equal to itself' :tests.should do
    'hello' :should (\be, \==, 'hello')
  end

  'should concatenate' :tests.should do
    'hello world':should(\be, \==, 'hello' + ' world')
  end

  'should interpolate' :tests.should  do
    '{'hi'} {'world'}':should(\be, \==, 'hi world')
  end
end


'Blocks' :tests.covers do
    a = 1

    'should capture' :tests.should  do
        a:should(\be, \==, 1)

        test = do
           a:should(\be, \==, 1)
           a  
        end

        test:():should(\be, \==, 1)
    end

   'should work with varargs' :tests.should  do
      varfunc = do first, ..args
        first:should(\be, \==, 1)
        args:at(0):should(\be, \==, 2)
      end

      varfunc:(1,2)

      onetwo = do; (1, 2) end

      varfunc:(onetwo:())
   end

   'should work more with varargs' :tests.should do
      varfunc = do first, ..args, last
        first:should(\be, \==, 1)
        args:at(0):should(\be, \==, 2)
        last:should(\be, \==, 3)
      end

      varfunc:(1,2,3)

      onetwothree = do; (1, 2, 3) end

      varfunc:(onetwothree:())
   end

   'should make var args empty when necessary' :tests.should do
      varfunc = do first, ..args, other, last
        first:should(\be, \==, 1)
        args:len:should(\be, \==, 0)
        other:should(\be, \==, 2)
        last:should(\be, \==, nil)
      end

      varfunc:(1,2)

      onetwo = do; (1, 2) end

      varfunc:(onetwo:())

   end
end

'Records' :tests.covers do
  Point = { x, y }?

  'should have properties' :tests.should do
    point = {
      x = 1,
      y = 2
    }

    point:x:should(\be, \==, 1)
    point:y:should(\be, \==, 2)
  end

  'should be structurally shaped' :tests.should do
    pone = { x = 1, y = 2}
    ptwo = { x = 3, y = 4}

    (pone ?):should(\be, \==, ptwo ?)
  end

  'should work for all kinds of keys' :tests.should do
    obj = {
        [{}?] = 3,
        [.hi] = 4
    }

    3:should(\be, \==, obj:at({}?))
    4:should(\be, \==, obj:at(.hi))
  end

  'should work when shapes change' :tests.should do
    justa = { a }
    ab = { a = 3, b }
    abc = { a = 'hi', b, c}

    \get_a :def! ({ a }?, do
        self:a
    end)

    \get_a :def! ({ a, b }?, do
        self:a
    end)
    
    \get_a :def! ({ a, b, c }?, do
        self:a
    end)

    test_get_a = do obj, v
        obj:get_a:should(\be, \==, v)
    end


    test_get_a:(justa, true)

    test_get_a:(ab, 3)

    test_get_a:(abc, 'hi')

    test_get_a:(ab, 3)

    test_get_a:(ab, 3)

    ab:a = 5

    test_get_a:(abc, 'hi')

    test_get_a:(ab, 5)

    test_get_a:(justa, true)
  end

  'should make tuples' :tests.should do
    tup = [ 1, 2, 3 ]

    tup:at(0):should(\be, \==, 1)
    tup:at(1):should(\be, \==, 2)
    tup:at(2):should(\be, \==, 3)
  end

  'should make var tuples' :tests.should do
    onetwothree = do
      (1, 2, 3)
    end

    tup = [ onetwothree:() ]

    tup:at(0):should(\be, \==, 1)
    tup:at(1):should(\be, \==, 2)
    tup:at(2):should(\be, \==, 3)

    tup = [ true :and do; onetwothree:() end ]
    tup:at(0):should(\be, \==, 1)
    tup:at(1):should(\be, \==, 2)
    tup:at(2):should(\be, \==, 3)
    tup:len:should(\be, \==, 3)

    tup = [ true :or do; onetwothree:() end ]
    tup:at(0):should(\be, \==, true)
    tup:len:should(\be, \==, 1)

    tup = true :and do; [ onetwothree:() ] end
    tup:at(0):should(\be, \==, 1)
    tup:at(1):should(\be, \==, 2)
    tup:at(2):should(\be, \==, 3)
    tup:len:should(\be, \==, 3)
  end
end

'Overloads' :tests.should do
    Vector = { x, y }?

    \+ :def! (Vector, do other
        other:is?(Vector) :or do
          .INVALID_ARGUMENTS:panic
        end

        {
            x = (self:x) + (other:x),
            y = (self:y) + (other:y),
        }
    end)

    'should overload binary' :tests.should do
        test = { x = 1, y = 2 } + { x = 2, y = 1 }

        3:should(\be, \==, test:x)
        3:should(\be, \==, test:y)
    end

    \< :def! (Vector, do other
        other:is?(Vector) :or do
          .INVALID_ARGUMENTS:panic
        end

        mag = ((self:x) * (self:x)) + ((self:y) * (self:y))
        other_mag = ((other:x) * (other:x)) + ((other:y) * (other:y))

        mag < other_mag
    end)

    \== :def! (Vector, do other
        (self:x) == (other:x) :and do
          (self:y) == (other:y)
        end
    end)

    'should overload comparison' :tests.should do
        { x = 1, y =  1 }:should(\be, \==, { x = 1, y = 1})
        ({ x = 1, y = 2 } < { x = 4, y = 4}):should(\be, \==, true)
    end

    get = do obj, key
        obj:at(key)
    end

    'should get before overload' :tests.should do
        1:should(\be, \==, get:({ x = 1, y = 2}, 'x'))
    end


    \at :def! (Vector, do key
      key == 'mag' :and do
        ((self:x) * (self:x)) + ((self:y) * (self:y))
      end
    end)

    'should overload get' :tests.should do
        get:({ x = 2, y = 2 },'mag'):should(\be, \==, 8)
    end

    'should behave when switching types' :tests.should do
      sum = do a, b
        a + b
      end

      3:should(\be, \==, sum:(1,2))
      {x = 3, y = 3}:should(\be, \==, sum:({x = 1, y = 2}, {x = 2, y = 1}))
      'hi':should(\be, \==, sum:('h','i'))
      'hi':should(\be, \==, sum:('h','i'))
      {x = 3, y = 3}:should(\be, \==, sum:({x = 1, y = 2}, {x = 2, y = 1}))
      3:should(\be, \==, sum:(1,2))
    end
end

'Messages' :tests.covers do
    \test :def! do
        self    
    end

    'should send' :tests.should do
        1:should(\be, \==, 1:test)
    end

    \test :def! (.gab.number, do
        self + 1
    end)

    'should use more specific' :tests.should do
        1:test:should(\be, \==, 2)
    end

    repeat = do; 1:test end

    'should cache' :tests.should do
        repeat:():should(\be, \==, 2)
        repeat:():should(\be, \==, 2)
        repeat:():should(\be, \==, 2)
    end

    oneTwo = do; (1, 2) end

    'should send/receive var' :tests.should do
      takeOneTwo = do a, b
        1:should(\be, \==, a)
        2:should(\be, \==, b)
      end

      takeOneTwo:(oneTwo:())
    end
end
