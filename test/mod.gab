\variables.new_variables.test :def! (t => do
  a = 2
  t:expect(a \== 2)

  a = 3
  t:expect(a \== 3)
end)

\variables.mutltiple_variables.test :def! (t => do
  (a b) = (1 2)
  t:expect(a \== 1)
  t:expect(b \== 2)

  (a b) = (b a)
  t:expect(a \== 2)
  t:expect(b \== 1)
end)

\variables.reassign_variables.test :def! (t => do
  (a b c d) = (1 2 3 4)
  t:expect(a \== 1)
  t:expect(b \== 2)
  t:expect(c \== 3)
  t:expect(d \== 4)

  (a c d e) = (5 6 7 8)
  t:expect(a \== 5)
  t:expect(c \== 6)
  t:expect(d \== 7)
  t:expect(e \== 8)
end)

\variables.rest_assign_constant.test :def! (t => do
  (a b c[]) = (1 2 3 4 5)

  t:expect(a \== 1)
  t:expect(b \== 2)
  t:expect(c:at! 0 \== 3)
  t:expect(c:at! 1 \== 4)
  t:expect(c:at! 2 \== 5)
end)

\variables.rest_assign_middle.test :def! (t => do
  (a b[] c) = (1 2 3 4 5)

  t:expect(a \== 1)
  t:expect(c \== 5)
  t:expect(b:at! 0 \== 2)
  t:expect(b:at! 1 \== 3)
  t:expect(b:at! 2 \== 4)
end)

\variables.rest_assign_runtime.test :def! (t => do
  one_through_five = _ => (1 2 3 4 5)

  (a[] b c) = one_through_five:()

  t:expect(b \== 4)
  t:expect(c \== 5)
  t:expect(a:at! 0 \== 1)
  t:expect(a:at! 1 \== 2)
  t:expect(a:at! 2 \== 3)
end)

\variables.rest_assign_existing_variable.test :def! (t => do
  one_through_five = _ => (1 2 3 4 5)

  b = 1

  (a b[] c) = one_through_five:()

  t:expect(a \== 1)
  t:expect(c \== 5)
  t:expect(b:at! 0 \== 2)
  t:expect(b:at! 1 \== 3)
  t:expect(b:at! 2 \== 4)
end)

\numbers.equal_itself.test :def! (t => do
  t:expect(5 \== 5)
end)

\numbers.do_math.test :def! (t => do
  t:expect(10 \== (5 * 2))
  t:expect(1 \== (10 % 3))
  t:expect(8 \== (1 << 3))
end)

\numbers.compare.test :def! (t => do
  t:expect((5 < 10) \== .true)
  t:expect((10 > 5) \== .true)
end)

\numbers.dynamic_do_math.test :def! (t => do
  t:expect(\+:(1 2) \== 3)
  t:expect(\+:(1 2 .ignore_me) \== 3)
  t:expect(\-:(1 2) \== -1)
end)

\strings.equal_itself.test :def! (t => do
  t:expect('hello' \== 'hello')
end)

\strings.concatenate.test :def! (t => do
  t:expect('hello world' \== 'hello' + ' world')
end)

\strings.dynamic_interpolate.test :def! (t => do
  t:expect(\+:('hi ' 'world') \== 'hi world')
  t:expect(\+:('hi ' 'world' .ignore_me) \== 'hi world')
end)

\strings.append_sigils.test :def! (t => do
  t:expect(\+:('hi ' .world) \== 'hi world')
  t:expect(('hi ' + .world) \== 'hi world')
end)

\blocks.capture.test :def! (t => do
  capture_me = 1

  t:expect(capture_me \== 1)

  test = _ => do
      t:expect(capture_me \== 1)
      capture_me  
  end

  t:expect(test:() \== 1)
end)

\blocks.work_with_varargs.test :def! (t => do
  varfunc = (first args[]) => do
    t:expect(first \== 1)
    t:expect(args:at! 0 \== 2)
  end

  varfunc:(1 2)

  onetwo = _ => (1 2)

  varfunc:(onetwo:())

  varfunc = (first args[] last) => do
    t:expect(first \== 1)
    t:expect(args:at! 0 \== 2)
    t:expect(last \== 3)
  end

  varfunc:(1 2 3)

  onetwothree = _ => (1 2 3)

  varfunc:(onetwothree:())
end)

\blocks.empty_varargs.test :def! (t => do
  varfunc = (first args[] other last) => do
    t:expect(first \== 1)
    t:expect(args:len, \== 0)
    t:expect(other \== 2)
    t:expect(last \== .nil)
  end

  varfunc:(1 2)

  onetwo = _ => (1 2)

  varfunc:(onetwo:())
end)

Point = { \x .nil, \y .nil }?

\records.have_properties.test :def! (t => do
  point = {
    \x 1
    \y 2
  }

  t:expect(point:x, \== 1)
  t:expect(point:y, \== 2)
end)

\records.structurally_type.test :def! (t => do
  pone = { \x 1 \y 2}
  ptwo = { \x 3 \y 4}

  t:expect(pone:?, \== ptwo:?)
end)

\records.work_for_all_keys.test :def! (t => do
  obj = {
      ({}?) 3
      .hi 4
  }

  t:expect(3 \== obj:at!({}?))
  t:expect(4 \== obj:at!(.hi))
end)

\records.make_tuples.test :def! (t => do
  tup = [ 1 2 3 ]

  t:expect(tup:at! 0 \== 1)
  t:expect(tup:at! 1 \== 2)
  t:expect(tup:at! 2 \== 3)
end)

\records.make_var_tuples.test :def! (t => do
  onetwothree = _ => (1 2 3)

  tup = [ onetwothree:() ]
  t:expect(tup:at! 0 \== 1)
  t:expect(tup:at! 1 \== 2)
  t:expect(tup:at! 2 \== 3)
  t:expect(tup:len, \== 3)
end)

\records.take_fields.test :def! (t => do
  rec = { .a 1 .b 2 .c 3 }

  (without_a, v) = rec :take .a

  t:expect((without_a ?) \== { .c 1, .b 2 } ?)
  t:expect(without_a :at! .b \== 2)
  t:expect(without_a :at! .c \== 3)
  t:expect(v \== 1)

  (without_b, v) = rec :take .b

  t:expect((without_b ?) \== { .a 1, .c 2 } ?)
  t:expect(without_b :at! .a \== 1)
  t:expect(without_b :at! .c \== 3)
  t:expect(v \== 2)
end)

\records.big_take_fields.test :def! (t => do
  list = [
    0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
    17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
    33 34 35 36 37 38 39 40
  ]

  (popped, v) = list :take 40

  t:expect(popped:len, \==, 40)
  t:expect(v, \==, 40)

  (popped, v) = list :take 10

  t:expect(popped:len, \==, 40)
  t:expect(v, \==, 10)
end)

vec.t = { \x .nil, \y .nil }?

\+ :def! (vec.t other => {
  \x self:x + other:x
  \y self:y + other:y
})

\== :def!(vec.t other => do
  (self:x == other:x) & (self:y == other:y)
end)

\overloads.overload_operators.test :def! (t => do
  a = { \x 1 \y 2 }
  b = { \x 2 \y 1 }
  test = a + b

  t:expect(test:x, \== 3)
  t:expect(test:y, \== 3)
end)

\overloads.overload_comparison.test :def! (t => do
  \< :def!(vec.t other => do
    mag = ((self:x) * (self:x)) + ((self:y) * (self:y))
    other_mag = ((other:x) * (other:x)) + ((other:y) * (other:y))
    mag < other_mag
  end)

  a = { \x 1 \y 1 }
  b = { \x 1 \y 1 }
  t:expect(a \== b)

  b = { \x 4 \y 4 }
  t:expect(a \< b)
end)

\overloads.handle_changing_overloads.test :def! (t => do
  get = (obj key) => obj:at! key

  t:expect(get:({ \x 1 \y 2 } \x) \== 1)

  \at! :def! (vec.t key => do
    v = self
    (key == 'mag') :then (_ => do
      ((v:x) * (v:x)) + ((v:y) * (v:y))
    end)
  end)

  t:expect(get:({ \x 2 \y 2 } 'mag') \== 8)
end)

\overloads.handle_switching_types.test :def! (t => do
  sum = (a b) => a + b

  a = { \x 3 \y 3 }
  b = { \x 1 \y 2 }
  c = { \x 2 \y 1 }

  t:expect(3 \== sum:(1 2))
  t:expect(a \== sum:(b c))
  t:expect('hi' \== sum:('h' 'i'))
  t:expect('hi' \== sum:('h' 'i'))
  t:expect(a \== sum:(b c))
  t:expect(3 \== sum:(1 2))
end)

\test :def! do _ => self end

\messages.send.test :def! (t => do
  t:expect(1 \== 1:test)
end)

\messages.cache.test :def! (t => do
  repeat = _ => (1:test)

  t:expect(repeat:() \== 1)
  t:expect(repeat:() \== 1)
  t:expect(repeat:() \== 1)
end)

\messages.use_more_specific_spec.test :def! (t => do
  \test :def! ('gab.number' _ => do
      self + 1
  end)

  t:expect(1:test, \== 2)
end)

\messages.send_receive_var.test :def! (t => do
  oneTwo = _ => (1 2)

  takeOneTwo = (a b) => do
    t:expect(1 \== a)
    t:expect(2 \== b)
  end

  takeOneTwo:(oneTwo:())
end)

\messages.send_constants.test :def! (t => do
  \hi :def! ('gab.number' .test)

  t:expect(1:hi, \== .test)
end)

\messages.send_dynamically.test :def! (t => do
  sum = (a b) => do
    \+:(a b)
  end

  result = sum:(1 1)

  t:expect(result \== 2)

  result = sum:(2 2)

  t:expect(result \== 4)

  result = sum:('hi' ' world')

  t:expect(result \== 'hi world')

  result = \hi:{ \hi 8 }

  t:expect(result \== 8)

  result = \put:({ \hi 8 } \hi  2)

  t:expect(result:hi, \== 2)

  result = \**:['hi']

  t:expect(result \== 'hi')

  result = \hi:({ \hi .nil } 4)

  t:expect(result:hi, \== 4)
end)

\channels.basic :def! t => do
  ch = .gab.channel:make

  .gab.fiber:make () => ch <! 'test'

  (ok v) = ch >!

  t:expect(ok \== .ok)
  t:expect(v \== 'test')

  ch:close!

  ok = ch >!

  t:expect(ok \== .none)
end

\channels.handle_multiple_blocking_puts :def! t => do
  ch = .channel:make

  blocking_put = (v) => .fiber:make() => ch <! v

  blocking_put:(1)
  blocking_put:(2)
  blocking_put:(3)

  took_lessthan_four = () => t:expect(ch:>!:unwrap!, \< 4)

  took_lessthan_four:()
  took_lessthan_four:()
  took_lessthan_four:()
end

#\channels.be_buffered :def! t => do
#  ch = .channel:make 3
#
#  put_hi = () => ch <! 'hi'
#
#  .fiber:make put_hi
#  .fiber:make put_hi
#  .fiber:make put_hi
#
#  take_hi = () => do
#    (ok v) = ch >!
#
#    t:expect(ok \== .ok)
#    t:expect(v \== 'hi')
#  end
#
#  take_hi:()
#  take_hi:()
#
#  ch:close!
#
## Take last hi
#  take_hi:()
#
## Now we get none
#  ok = ch >!
#
#  t:expect(ok \== .none)
#end
#
#\channels.be_dropping.test :def! t => do
#  ch = .channel:make(2 .dropping)
#
#  put_val = (val) => ch <! val
#
#  take_val = (val) => do
#    (ok v) = ch >!
#
#    t:expect(ok \== .ok)
#    t:expect(v \== val)
#  end
#
#  put_val:('hello')
#  put_val:('world')
#
#  take_val:('hello')
#  take_val:'world'
#
#  put_val: 1
#  put_val: 2
#  put_val: 3
#  put_val: 4
#
#  take_val: 1
#  take_val: 2
#
#  put_val: 'again'
#
#  ch:close!
#  take_val: 'again'
#
#  ok = ch >!
#
#  t:expect(ok \== .none)
#end
#
#\channels.be_sliding.test :def! t => do
#  ch = .channel:make(2 .sliding)
#
#  put_val = (val) => ch <! val
#
#  took_lessthan_four = () => t:expect(ch:>!:unwrap!, \< 4)
#
#  take_val = (val) => do
#    (ok v) = ch >!
#
#    t:expect(ok \== .ok)
#    t:expect(v \== val)
#  end
#
#  put_val:('hello')
#  put_val:('world')
#
#  take_val:('hello')
#  take_val:'world'
#
#  put_val: 1
#  put_val: 2
#  put_val: 3
#  put_val: 4
#
#  take_val: 3
#  take_val: 4
#
#  put_val: 'again'
#
#  ch:close!
#
#  take_val:'again'
#
#  ok = ch >!
#
#  t:expect(ok \== .none)
#end

'tests' :use :()
