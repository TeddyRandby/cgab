# See: https://adventofcode.com/2022/day/1

'Range':require
'Record':require
'String':require
'Number':require

def partition = do (array, low, high)
	# choose the rightmost element as pivot
	pivot = array[high]

	# pointer for greater element
	i = low - 1

	# traverse through all elements
	# compare each element with pivot
	for j in :range(low, high)
      array[j] <= pivot then
        # If element smaller than pivot is found
        # swap it with the greater element pointed by i
        i = i + 1

        # Swapping element at i with element at j
        (array[i], array[j]) = (array[j], array[i])
      end
  end

	# Swap the pivot element with the greater element specified by i
	array[i + 1], array[high] = array[high], array[i + 1]

	# Return the position from where partition is done
	return i + 1
end

def qsort[.Record](low, high)
	low < high then

		# Find pivot element such that
		# element smaller than pivot are on the left
		# element greater than pivot are on the right
		pi = partition(self, low, high)

		# Recursive call on the left of pivot
		self:qsort(low, pi - 1)

		# Recursive call on the right of pivot
		self:qsort(pi + 1, high)
  end
end


def io = 'io':require

def Elf {
  snacks
}

impl Elf
  def cals
    self.snacks:fold(0) do (cals, snack) cals + snack end
  end
end

impl .String
  def to_elf
    snacks = self:split('\n'):map do return @1:to_n end
    return { snacks }
  end

  def solve
    elves = self:split('\n\n'):map do return @1:to_elf:cals end

    solution = elves:fold(0) do (max, elf) return elf > max and elf or max end

    return solution
  end
end


status, puzzle = io:open('input.txt', 'r')

status == .ok or status:panic

status, puzzle = puzzle:read

status == .ok or status:panic

puzzle:solve:print
