require('std')
def Terminal = require('term')

def Cell { x y alive }

def Colony { h w cells }

def World { term colony }

impl Cell
    def new(x, y)
        { x y alive = true }
    end

    def neighbors
        yield self.x - 1, self.y - 1
        yield self.x    , self.y - 1
        yield self.x + 1, self.y - 1

        yield self.x - 1, self.y
        yield self.x + 1, self.y

        yield self.x - 1, self.y + 1
        yield self.x    , self.y + 1
        yield self.x + 1, self.y + 1
    end
end

impl Colony
    def new(h,w)
        {
            h
            w
            cells = List:new(h):map! do (_, y)
                List:new(w):map! do (_, x)
                    Cell:new(x, y)
                end
            end
        }
    end

    def at(arg_x, arg_y)
        def x = arg_x:clamp(self.w:to)
        def y = arg_y:clamp(self.h:to)

        return self.cells[x][y]
    end

    def each
        for row in self.cells:each
            for cell in row:each
                yield cell
            end
        end
    end
end

impl World
    def new
        def term = Terminal:new { noecho }
        def h, w = term:dim

        { term colony = Colony:new(h, w) }
    end

    def print
        for cell in self.colony:each
            cell.alive and self.term:put(cell.x, cell.y, '#')
        end

        self.term:refresh
    end

    def step
        let colony = Colony:new 

        def wr = self.colony.w:to
        def hr = self.colony.h:to

        for cell in self.colony:each
            for x, y in cell:neighbors
                def nb = self.colony:at(x, y)
                
                nb.alive and print('hi')
            end
        end
    end

    def wait self.term:key end
end



def world = World:new

world:print

world:wait
