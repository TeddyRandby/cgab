iter = 'iter' :use

\do_acc :defcase! {
  .true  = do acc: acc end,
  .false = do acc, n: [n, acc:acc(n - 1)**] end, 
}

\acc :def!(['gab.record'], do n:
  n :== 0 :do_acc (self, n)
end)

\go :def!(['gab.block'], do:
  blk = self
  .gab.fiber do: blk() end
end)

in, out = .gab.channel(), .gab.channel()

{in,out}:print

work = do:
  n = in >! :unwrap!

  out <! [] :acc n :len
end

# Insert 100 values into the channel 
fib = do:
  .gab.range      .
  (100, 200)  .
    :transduce(
      100,
      \first,
      iter:tap do x:
        in <! x
      end,
    )
end :go

{ fib } :print

# Take a hundred values from the out channel
res = do:
  xf = iter:take 100    .
    |> iter:tap \print

  out :transduce(.nil, \first, xf)
end :go

{ res } :print

# Spawn 100 workers
.gab.range      .
  (100,200) .
  :transduce(
    100,
    \first,
    iter:tap do:
      worker = work:go
    end,
  )
