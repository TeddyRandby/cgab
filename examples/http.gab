def iter(i) do
  let v = -1
  || => return (v = v + 1), i[v]
end

def parseHeaders(req)
  !re.exec(req, "([A-Za-z\-]+): ([a-zA-Z0-9]*)")

def parseMeta(req)
  !re.exec(req, "^([A-Z]+) ([a-zA-Z0-9\/\.\-]+) HTTP\/([0-9]\.[0-9])")
  
def connections(sock) || => do
  let conn = sock:!socket.accept()!

  let req = conn:!socket.recv()!
  
  return conn, req

end

  
def HTTP {

  def Config {
    port
    routes
  }

  def Routes {
      get
      post
  }

  def New(config) do
    if (not (config is HTTP.Config?))
      return null, "Misshapen config"
      
    if (not (config.routes is HTTP.Routes?))
      return null, "Misshapen routes"
      
    config
  end
  

  def Start(self) do
    let sock = !socket.sock()!

    sock:!socket.bind(self.port)!

    sock:!socket.listen(5)!
    
    !info('Server is listening on port: {self.port}')

    for (conn, req in sock:connections()) do
      let _, method, url, version = ..req:parseMeta()
      
      !info('Connecection Established. ({version})')
      
      !info(url)

      conn:!socket.send("EMPTY")!

      conn:!socket.close()!
    end
  end

  def Get(self, url, handler) do
    self.routes.get[url] = handler
  end
}

let server, err = HTTP.New {
  port: 5050
  routes: { get post }
}



if (err) do
  !error(err)
  return
end


server:HTTP.Start()
