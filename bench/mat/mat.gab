require('std')

def Matrix { n data }

def matrix[](n, data) { n data } end

impl Matrix
  def + (other)
    def N = self.n

    let data = :record(?self.data)

    for i in (N * N):each
      data[i] = self.data[i] + other.data[i]
    end

    :matrix(N, data)
  end

  def * (other)
    def N = self.n

    def data = :record(?self.data)

    for i in N:each
      for j in N:each
        let sum = 0

        for k in N:each
          sum = sum + self.data[i*N+k] * other.data[k*N+j]
        end

        data[i*N+j] = sum
      end
    end

    :matrix(N, data)
  end

  def diag_sum
    let sum = 0

    def N = self.n

    for i in N:each
      sum = sum + self.data[i*(N + 1)]
    end

    sum
  end


end


let sum = 0

let N = 2

for _ in 5000:each
  let a = :matrix(N, :list(N * N):map! do (_, i) i end :slice)
  let b = :matrix(N, :list(N * N):map! do (_, i) i end :slice)

  let c = a + b
  let d = c * a * b

  sum = d:diag_sum
end

print(sum)
