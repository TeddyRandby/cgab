:use 'records'
:use 'numbers'
:use .streams

def Matrix { n, data }

def matrix[](n, data)
  { n, data }
end

def +[Matrix](other)
  def N = self:n

  data = :record.new(?self:data)

  i, done = 0, (N * N)
  loop
    data[i] = self:data[i] + other:data[i]
    i = i + 1
  until i == done end

  :matrix(N, data)
end

def *[Matrix](other)
  def N = self:n

  def data = :record.new(?self:data)

  i, done = 0, N

  loop
    j = 0
    loop
      sum, k = 0, 0

      loop
        sum = sum + self:data[i * N + k] * other:data[k * N + j]
        k = k + 1
      until k == done end

      data[i * N + j] = sum

      j = j + 1
    until j == done end

    i = i + 1
  until i == done end

  :matrix(N, data)
end

def diag_sum[Matrix]
  sum = 0

  def N = self:n

  i, done = 0, N
  loop
    sum = sum + self:data[i*(N + 1)]
    i = i + 1
  until i == done end

  sum
end

N, sum, i = 3, 0, 0 

loop
  a = :matrix(N, :tuple.new(N * N):map! do; @1 end)
  
  b = :matrix(N, :tuple.new(N * N):map! do; @1 end)

  c = a + b

  d = c * a * b

  sum = d:diag_sum

  i = i + 1
until i == 5000 end

sum:print
