:use 'std/Record'
:use 'std/Number'

def Matrix { n data }

def matrix[](n, data); { n data } end

def +[Matrix](other)
  def N = self.n

  data = :record(?self.data)

  for i in (N * N):each
    data[i] = self.data[i] + other.data[i]
  end

  :matrix(N, data)
end

def *[Matrix](other)
  def N = self.n

  other:print

  def data = :record(?self.data)

  for i in N:each
    for j in N:each
      sum = 0

      for k in N:each
        sum = sum + self.data[i*N+k] * other.data[k*N+j]
      end

      data[i*N+j] = sum
    end
  end

  :matrix(N, data)
end

def diag_sum[Matrix]
  sum = 0

  def N = self.n

  for i in N:each
    sum = sum + self.data[i*(N + 1)]
  end

  sum
end

N, sum, i = 2, 0, 0 

loop
  a = :matrix(N, :tuple(N * N):map! do; @2 end)
  b = :matrix(N, :tuple(N * N):map! do; @2 end)

  c = a + b
  d = c * a * b

  sum = d:diag_sum

  i = i + 1
until i == 5000 end

sum:print
