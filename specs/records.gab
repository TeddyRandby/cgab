:use 'specs'

:spec.def! .Record {
  help = "An ordered, consant array of key-value pairs.",
  spec = :spec.protocol {},
}

:spec.def! .Record.len {
  help = "Get the number of key-value pairs in the record.",
  spec = :spec.message {
    receiver = :spec .Record,
    message  = &:len,
    input    = :spec.unknown,
    output   = :spec.int,
  },
}

:spec.def! .Record.at {
  help = "Get the value at the given key, if it exists.",
  spec = :spec.message {
    receiver = :spec .Record,
    message  = &:at,
    input    = :spec.nil,
    output   = :spec.option(:spec.unknown),
  },
}

:spec.def! .Record.to_l {
  help = "Convert a record to a list of key-value pairs.",
  spec = :spec.message {
    receiver = :spec .Record,
    message  = &:to_l,
    input    = :spec.nil,
    output   = :spec.list(:spec.tuple(:spec.unknown, :spec.unknown)),
  },
}

:spec.def! .Record.to_m {
  help = "Convert a record to a map.",
  spec = :spec.message {
    receiver = :spec .Record,
    message  = &:to_m,
    input    = :spec.nil,
    output   = :spec.map(:spec.unknown, :spec.unknown),
  },
}
